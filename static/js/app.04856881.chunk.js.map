{"version":3,"sources":["assets/x.png","utils/GetColorGradient.js","Convert.js","App.js","index.js"],"names":["module","exports","GetColorGradient","color","chroma","scale","brighten","darken","colors","Dimensions","get","width","height","SCREEN_HEIGHT","scaleHeight","HeightRatio","size","newSize","Math","round","PixelRatio","roundToNearestPixel","Convert","useState","value","setValue","result","setResult","gradient","setGradient","isHovered","setIsHovered","isGradientHovered","setIsGradientHovered","React","copiedText","setCopiedText","gradientCopiedText","setGradientCopiedText","useFonts","Inter_900Black","copyToClipboard","Clipboard","console","log","fetchCopiedText","text","copyGradientToClipboard","input","fetchGradientCopiedText","View","Text","style","fontFamily","fontSize","alignSelf","TouchableOpacity","onPress","borderRadius","position","zIndex","backgroundColor","top","Image","source","require","marginTop","marginLeft","flexDirection","margin","TextInput","onChangeText","placeholder","outline","display","justifyContent","padding","border","borderColor","borderTopWidth","borderLeftWidth","borderBottomWidth","borderRightWidth","borderTopLeftRadius","borderBottomLeftRadius","marginBottom","startsWith","r","parseInt","slice","g","b","parts","match","toString","padStart","handleConvert","borderTopRightRadius","borderBottomRightRadius","activeOpacity","styles","button","hoveredButton","normalButton","onMouseEnter","onMouseLeave","borderWidth","flexWrap","map","c","i","StyleSheet","create","buttonText","App","LinearGradient","opacity","flex","fontWeight","SafeAreaView","container","ScrollView","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","async","src","crossOrigin","alignItems","AppRegistry","registerComponent","runApplication","rootTag","document","getElementById"],"mappings":"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","file":"static/js/app.04856881.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.bc64bca0.png\";","import chroma from 'chroma-js';\n\nexport const GetColorGradient = (color) => {\n  const scale = chroma.scale([chroma(color).brighten(2), color, chroma(color).darken(2)]);\n  return scale.colors(10);\n};","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './utils/GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const Convert = () => {\n    const [value, setValue] = useState('')\n    const [result, setResult] = useState('');\n    const [color, setColor] = useState('');\n    const [gradient, setGradient] = useState([]);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n    const [copiedText, setCopiedText] = React.useState('');\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n    let [fontsLoaded] = useFonts({ Inter_900Black, });\n    if (!fontsLoaded) { return null; }\n\n\n\n    const handleGenerate = () => {\n        setGradient(GetColorGradient(color));\n    };\n\n    // Primary Color\n    const copyToClipboard = async () => {\n        await Clipboard.setStringAsync(result);\n        console.log(\"copyToClipboard\")\n        fetchCopiedText();\n    };\n    \n    const fetchCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setCopiedText(text);\n    };\n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        console.log(\"copyToClipboard\")\n        fetchGradientCopiedText();\n    };\n    \n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n    const handleConvert = () => {\n        setCopiedText('')\n        if (value.startsWith('#')) {\n            // Convert HEX to RGBA\n            const r = parseInt(value.slice(1, 3), 16);\n            const g = parseInt(value.slice(3, 5), 16);\n            const b = parseInt(value.slice(5, 7), 16);\n            const a = 1; // Assume full opacity\n            setResult(`rgba(${r}, ${g}, ${b}, ${a})`);\n            setGradient(GetColorGradient(`rgba(${r}, ${g}, ${b}, ${a})`))\n        } else if (value.startsWith('rgba')) {\n            setGradient(GetColorGradient(value))\n            // Convert RGBA to HEX\n            const parts = value.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b = parseInt(parts[3]).toString(16).padStart(2, '0');\n            setResult(`#${r}${g}${b}`);\n        }\n    };\n\n\n\n    return (\n\n        <View>\n\n            <Text style={{\n                fontFamily: 'Inter_900Black',\n                fontSize: '4vh',\n                alignSelf: 'center',\n                color: 'white'\n            }}>Convert HEX or RGBA</Text>\n\n            <View style={{}}>\n                {value &&\n                    <TouchableOpacity\n                        onPress={() => { setValue('') }}\n                        style={{\n                            height: '4vh',\n                            width: '4vh',\n                            borderRadius: 10,\n                            position: 'absolute',\n                            zIndex: 10,\n                            backgroundColor: '#ff1654',\n                            top: '1vh'\n                        }}>\n                        <Image\n                            source={require('./assets/x.png')}\n                            style={{ height: 15, width: 15, alignSelf: 'center', marginTop: '1.1vh', marginLeft: '0.3vh' }}\n                        />\n                    </TouchableOpacity>\n                }\n                <View style={{ flexDirection: 'row', alignSelf: 'center', margin: 10 }}>\n                    <TextInput\n                        value={value}\n                        onChangeText={setValue}\n                        placeholder=\"Enter HEX or RGBA value\"\n                        style={{\n                            outline: 'none',\n                            backgroundColor: 'transparent',\n                            color: 'white',\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            padding: 30,\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderTopWidth: 4,\n                            borderLeftWidth: 4,\n                            borderBottomWidth: 4,\n                            borderRightWidth: 0,\n                            borderTopLeftRadius: 30,\n                            borderBottomLeftRadius: 10,\n                            alignSelf: 'center',\n                            marginTop: 10,\n                            marginBottom: 4,\n                            width: '17rem',\n                            fontSize: '1.8vh',\n                            fontFamily: 'Inter_900Black'\n                        }}\n                    />\n\n                    <TouchableOpacity\n                        onPress={() => handleConvert()}\n                        style={{\n                            backgroundColor: '#ff1654',\n                            padding: '1vh',\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderTopWidth: 4,\n                            borderRightWidth: 4,\n                            borderBottomWidth: 4,\n                            borderLeftWidth: 0,\n                            borderTopRightRadius: 10,\n                            borderBottomRightRadius: 30,\n                            marginTop: 10,\n                            marginBottom: 4,\n                            width: '6rem'\n                        }}\n                    >\n                        <Text style={{\n                            color: 'white',\n                            marginTop: '2.5vh',\n                            fontSize: '2vh',\n                            fontFamily: 'Inter_900Black',\n                            alignSelf: 'center'\n                        }}>SWAP!</Text>\n                    </TouchableOpacity>\n                </View>\n                {result ?\n                    <>\n                        <TouchableOpacity\n                            onPress={copyToClipboard}\n                            activeOpacity={1}\n                            style={[\n                                styles.button,\n                                isHovered ? styles.hoveredButton : styles.normalButton\n                            ]}\n                            onMouseEnter={() => setIsHovered(true)}\n                            onMouseLeave={() => setIsHovered(false)}\n                        >\n\n                            <Text style={{\n                                color: 'black',\n                                fontSize: 30,\n                                marginTop: '0.5rem',\n                                marginBottom: '2vh',\n                                fontFamily: 'Inter_900Black',\n                                alignSelf: 'center'\n                            }}>{result}</Text>\n\n                            {copiedText != '' &&\n                                <Text style={{\n                                    color: 'black',\n                                    fontSize: 20,\n                                    margin: '0.5rem',\n                                    fontFamily: 'Inter_900Black',\n                                    alignSelf: 'center'\n                                }}>Copied!</Text>\n                            }\n\n                            <View style={{\n                                width: '18rem',\n                                alignSelf: 'center',\n                                height: '15rem',\n                                marginBottom: HeightRatio(20),\n                                borderRadius: 30,\n                                backgroundColor: `${result}`\n                            }}></View>\n\n                        </TouchableOpacity>\n                    </>\n                    :\n                    <>\n                        <Text style={{\n                            color: 'white',\n                            fontSize: 30,\n                            margin: HeightRatio(20),\n                            fontFamily: 'Inter_900Black',\n                            alignSelf: 'center'\n                        }}>...result</Text>\n                        <View style={{\n                            width: '18rem',\n                            alignSelf: 'center',\n                            height: '15rem',\n                            marginBottom: '2rem',\n                            borderRadius: 30,\n                            borderWidth: 4,\n                            borderColor: 'white'\n                        }}></View>\n                    </>\n                }\n\n            </View>\n\n\n            <View style={{ flexDirection: 'row', flexWrap: 'wrap', width: '22rem', alignSelf: 'center', justifyContent: 'center' }}>\n                {gradient.map((c, i) => (\n                    <>\n                        <TouchableOpacity\n                            onPress={() => copyGradientToClipboard(c)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                            onMouseEnter={() => setIsGradientHovered(true)}\n                            onMouseLeave={() => setIsGradientHovered(false)}\n                            key={i}\n                        >\n                            <View key={i} style={{ backgroundColor: c, height: 50, width: 75, borderRadius: 5 }}>\n                                {isGradientHovered &&\n                                <Text style={{\n                                    fontFamily: 'Inter_900Black',\n                                    alignSelf: 'center',\n                                    marginTop: '1rem'\n                                }}>{c}</Text>\n                                }\n                            </View>\n                        </TouchableOpacity>\n                    </>\n                ))}\n                \n\n\n            </View>\n            <View style={{alignSelf: 'center', flexDirection: 'column'}}>\n                    <Text style={{color: 'white', fontFamily: 'Inter_900Black', fontSize: '5rem'}}>{gradientCopiedText}</Text>\n                    {gradientCopiedText != '' &&\n                        <Text style={{color: 'white', fontFamily: 'Inter_900Black', fontSize: '1rem', alignSelf: 'center'}}>Copied!</Text>\n                    }\n                </View>\n\n\n            <View style={{ height: 500 }} />\n        </View>\n\n    );\n};\n\nconst styles = StyleSheet.create({\n    button: {\n        padding: 10,\n        borderRadius: 5,\n    },\n    hoveredButton: {\n        backgroundColor: 'rgba(255, 255, 255, 0.75)',\n        marginBottom: HeightRatio(20),\n        width: '22rem',\n        alignSelf: 'center'\n    },\n    normalButton: {\n        backgroundColor: '#fff',\n        marginBottom: HeightRatio(20),\n        width: '22rem',\n        alignSelf: 'center'\n    },\n    buttonText: {\n        color: '#000',\n        fontSize: 18,\n    },\n});\n\n\n\n\n\n","import { StyleSheet, Text, View, Dimensions, PixelRatio, Image, SafeAreaView, ScrollView, StatusBar, Platform } from 'react-native';\nimport { Convert } from './Convert'\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n  width: SCREEN_WIDTH,\n  height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n  const newSize = size * scaleWidth;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n  const newSize = size * scaleHeight;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport default function App() {\n  return (\n    <>\n\n      <LinearGradient\n        colors={['#181818', '#000000']}\n        style={{ opacity: 1, width: '100%', alignSelf: 'center', flex: 1 }}\n      // start={[0.0, 0.5]} end={[1.0, 0.5]}\n      >\n        <View >\n\n          <View style={{ backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '4rem' }}>\n            <Text style={{ color: '#b892ff', alignSelf: 'center', marginTop: '0.8rem', fontSize: '2rem', fontWeight: 'bold', fontFamily: 'Inter_900Black', }}>HEX to RGBA Pro</Text>\n          </View>\n\n          <View style={{}}>\n            <SafeAreaView style={styles.container}>\n              <ScrollView style={{}} showsHorizontalScrollIndicator={false} showsVerticalScrollIndicator={false}>\n              <Convert />\n              </ScrollView>\n            </SafeAreaView>\n            {/* <StatusBar style=\"auto\" /> */}\n          </View>\n\n        </View>\n      </LinearGradient>\n      <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3255964932603196\"\n        crossOrigin=\"anonymous\"></script>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    // backgroundColor: '#181818',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '6vh'\n  },\n});\n","import { AppRegistry } from \"react-native\";\nimport App from \"./App\";\n\nAppRegistry.registerComponent(\"App\", () => App);\n\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});"],"sourceRoot":""}