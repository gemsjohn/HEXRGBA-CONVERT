{"version":3,"sources":["assets/x.png","utils/GetColorGradient.js","Styling.js","utils/ConvertTool.js","components/ConversionAlgorithms.js","utils/HarmoniousPalette.js","utils/RandomPalette.js","utils/RandomPaletteArray.js","Index.js","App.js","assets/cycle.png"],"names":["module","exports","GetColorGradient","color","chroma","scale","brighten","darken","colors","Dimensions","get","width","height","SCREEN_WIDTH","SCREEN_HEIGHT","scaleWidth","scaleHeight","WidthRatio","size","newSize","Math","round","PixelRatio","roundToNearestPixel","HeightRatio","Styling","StyleSheet","create","container","alignItems","justifyContent","marginTop","content_container","flexDirection","flexWrap","alignSelf","heading_0","fontSize","fontWeight","fontFamily","textAlign","division_line","borderBottomWidth","borderBottomColor","margin","accent_color","primarySquare","backgroundColor","borderRadius","text_input","outline","display","padding","border","borderColor","borderWidth","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","button_input","borderTopWidth","marginBottom","small_text","hoveredButton","normalButton","large_color_block","small_color_block","palette_container","circle_palette_container","circle_palette_box","circle_color","close_button","position","zIndex","top","left","red_x","marginLeft","ConvertTool","useState","value","setValue","result","setResult","gradient","setGradient","isHovered","setIsHovered","setIsGradientHovered","React","copiedText","setCopiedText","gradientCopiedText","setGradientCopiedText","useFonts","Inter_900Black","copyToClipboard","Clipboard","fetchCopiedText","text","copyGradientToClipboard","input","fetchGradientCopiedText","View","style","shadowOffset","shadowOpacity","shadowRadius","marginRight","Text","TouchableOpacity","onPress","Image","source","require","TextInput","onChangeText","placeholder","startsWith","a","match","map","x","parseInt","a0","r","slice","g","b","undefined","parseFloat","toFixed","parts","toString","padStart","handleConvert","activeOpacity","styles","button","onMouseEnter","onMouseLeave","c","i","buttonText","square","paragraph","marginVertical","hslToHex","h","s","l","abs","m","hexToHsl","hex","exec","max","min","d","generatePalette","Array","from","length","floor","random","paletteColors","concat","sort","localeCompare","baseColor","baseHue","baseSaturation","baseLightness","hue","saturation","lightness","_","newLightness","hue2rgb","p","q","t","hslToRgb","HarmoniousPalette","inputColor","setInputColor","palette","setPalette","newPalette","substring","phi","sqrt","color1","color2","color3","color4","color5","padHex","newHex","generateGoldenRatioPalette","console","log","RandomPalette","copiedCode","setCopiedCode","copyColorCode","fetchCopyColorCode","index","RandomPaletteArray","palettes","setPalettes","useEffect","previous","num","flex","Index","accessibilityLabel","HomeScreen","navigation","setRefreshing","useCallback","timeout","Promise","resolve","setTimeout","then","LinearGradient","opacity","start","end","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","name","component","options","animationEnabled","headerShown"],"mappings":"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","file":"static/js/app.fc290187.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.bc64bca0.png\";","import chroma from 'chroma-js';\n\nexport const GetColorGradient = (color) => {\n  const scale = chroma.scale([chroma(color).brighten(2), color, chroma(color).darken(2)]);\n  return scale.colors(10);\n};","import { StyleSheet, Dimensions, StatusBar, PixelRatio } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\n\nexport const windowWidth = Dimensions.get('window').width;\nexport const windowHeight = Dimensions.get('window').height;\n\nconst {\n  width: SCREEN_WIDTH,\n  height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nexport const WidthRatio = (size) => {\n  const newSize = size * scaleWidth;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const HeightRatio = (size) => {\n  const newSize = size * scaleHeight;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const Styling = StyleSheet.create({\n  container: {\n    // flex: 1,\n    // backgroundColor: '#181818',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '6vh'\n  },\n  content_container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignSelf: 'center',\n    justifyContent: 'center'\n  },\n  heading_0: {\n    color: 'white',\n    alignSelf: 'center',\n    marginTop: '0.8rem',\n    fontSize: HeightRatio(38),\n    fontWeight: 'bold',\n    fontFamily: 'Inter_900Black',\n    textAlign: 'center'\n  },\n  division_line: {\n    borderBottomWidth: 1,\n    borderBottomColor: '#80ffdb',\n    width: '60vw',\n    alignSelf: 'center',\n    margin: 10\n  },\n  accent_color: {\n    color: '#ff9f1c'\n  },\n  primarySquare: {\n    backgroundColor: 'rgba(255, 255, 255, 0.05)',\n    width: '350px',\n    // height: '13rem',  \n    margin: '0.75rem',\n    borderRadius: '1rem'\n  },\n  text_input: {\n    outline: 'none',\n    backgroundColor: 'transparent',\n    color: 'white',\n    display: 'flex',\n    justifyContent: 'flex-start',\n    padding: HeightRatio(20),\n    border: 'solid',\n    borderColor: 'white',\n    borderWidth: 4,\n    borderBottomWidth: 2,\n    borderTopLeftRadius: 30,\n    borderBottomLeftRadius: 0,\n    borderTopRightRadius: 30,\n    borderBottomRightRadius: 0,\n    alignSelf: 'center',\n    marginTop: HeightRatio(5),\n    width: '20rem',\n    fontSize: '18px',\n    fontFamily: 'Inter_900Black'\n  },\n  button_input: {\n    backgroundColor: '#ff1654',\n    padding: HeightRatio(10),\n    border: 'solid',\n    borderColor: 'white',\n    borderWidth: 4,\n    borderTopWidth: 2,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 30,\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 30,\n    marginBottom: 4,\n    width: '20rem'\n  },\n  small_text: {\n    color: 'white',\n    fontSize: HeightRatio(18),\n    fontFamily: 'Inter_900Black',\n    alignSelf: 'center'\n  },\n  hoveredButton: {\n    marginBottom: '10px',\n    alignSelf: 'center',\n    flexDirection: 'column',\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    width: '300px'\n  },\n  normalButton: {\n    marginBottom: '10px',\n    alignSelf: 'center',\n    flexDirection: 'column',\n    width: WidthRatio(300)\n  },\n  large_color_block: {\n    width: '100px',\n    alignSelf: 'center',\n    height: '100px',\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: 'rgba(100, 100, 100, 0.25)',\n  },\n  small_color_block: {\n    height: 50,\n    width: 75,\n    borderWidth: 1,\n    borderRadius: 6,\n    borderColor: 'rgba(100, 100, 100, 0.25)',\n  },\n  palette_container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    width: '22rem',\n    alignSelf: 'center',\n    justifyContent: 'center'\n  },\n  circle_palette_container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  circle_palette_box: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      width: '20rem',\n      margin: '1rem',\n      borderWidth: 2,\n      borderColor: 'white',\n      borderRadius: '1rem'\n  },\n  circle_color: {\n      width: 50,\n      height: 50,\n      borderRadius: 25,\n      margin: 10,\n  },\n  close_button: {\n    height: '4vh',\n    width: '4vh',\n    borderRadius: 10,\n    position: 'absolute',\n    zIndex: 10,\n    backgroundColor: '#ff1654',\n    top: '1vh',\n    left: '-5vh'\n  },\n  red_x: {\n    height: 15, \n    width: 15, \n    alignSelf: 'center', \n    marginTop: '1.3vh', \n    marginLeft: '0.1vh'\n  }\n});","import React, { useEffect, useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image, Color } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\nimport { HeightRatio, Styling, WidthRatio } from '../Styling';\n\n// const windowWidth = Dimensions.get('window').width;\n// const windowHeight = Dimensions.get('window').height;\n\n// const {\n//     width: SCREEN_WIDTH,\n//     height: SCREEN_HEIGHT,\n// } = Dimensions.get('window');\n\n// const scaleWidth = SCREEN_WIDTH / 360;\n// const scaleHeight = SCREEN_HEIGHT / 800;\n\n// const WidthRatio = (size) => {\n//     const newSize = size * scaleWidth;\n//     return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n// }\n\n// const HeightRatio = (size) => {\n//     const newSize = size * scaleHeight;\n//     return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n// }\n\nexport const ConvertTool = () => {\n    const [value, setValue] = useState('')\n    const [result, setResult] = useState('');\n    const [color, setColor] = useState('');\n    const [gradient, setGradient] = useState([]);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n    const [copiedText, setCopiedText] = React.useState('');\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n\n    let [fontsLoaded] = useFonts({ Inter_900Black, });\n    if (!fontsLoaded) { return null; }\n\n    // Primary Color\n    const copyToClipboard = async () => {\n        await Clipboard.setStringAsync(result);\n        fetchCopiedText();\n    };\n\n    const fetchCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setCopiedText(text);\n    };\n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        fetchGradientCopiedText();\n    };\n\n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n    const handleConvert = () => {\n        setCopiedText('')\n        if (value.startsWith('#')) {\n            const [r0, g0, b0, a0] = value.match(/\\w\\w/g).map(x => parseInt(x, 16));\n            let a;\n            // Convert HEX to RGBA\n            const r = parseInt(value.slice(1, 3), 16);\n            const g = parseInt(value.slice(3, 5), 16);\n            const b = parseInt(value.slice(5, 7), 16);\n            if (a0 != undefined) {\n                a = a0;\n            } else {\n                a = 255;\n            }\n             // Assume full opacity\n            setResult(`rgba(${r}, ${g}, ${b}, ${parseFloat(a/255).toFixed(2)})`);\n            setGradient(GetColorGradient(`rgba(${r}, ${g}, ${b}, ${parseFloat(a/255).toFixed(2)})`))\n        } else if (value.startsWith('rgba')) {\n            setGradient(GetColorGradient(value))\n            // Convert RGBA to HEX\n            const parts = value.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b = parseInt(parts[3]).toString(16).padStart(2, '0');\n            setResult(`#${r}${g}${b}`);\n        } else if (value.startsWith('rgb')) {\n            setGradient(GetColorGradient(value))\n            // Convert RGBA to HEX\n            const parts = value.match(/^rgb?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b = parseInt(parts[3]).toString(16).padStart(2, '0');\n            setResult(`#${r}${g}${b}`);\n        }\n    };\n\n    return (\n        <View\n            style={[\n                Styling.primarySquare,\n                {\n                    shadowOffset: {\n                        width: 10,\n                        height: 10,\n                    },\n                    shadowOpacity: 0.15,\n                    shadowRadius: 10,\n                },\n            ]}\n        >\n            <View style={{ marginLeft: '3rem', marginRight: '3rem', marginTop: '1rem' }}>\n                <Text style={{...Styling.small_text}}>Convert</Text>\n                <Text style={{...Styling.small_text, fontSize: HeightRatio(12)}}>(HEX, RGB, RGBA)</Text>\n\n                <View style={{}}>\n                    {value &&\n                        <TouchableOpacity\n                            onPress={() => {\n                                setValue('');\n                                setResult('');\n                                setGradient([]);\n                                setGradientCopiedText('');\n                            }}\n                            style={{...Styling.close_button}}>\n                            <Image\n                                source={require('../assets/x.png')}\n                                style={{ ...Styling.red_x }}\n                            />\n                        </TouchableOpacity>\n                    }\n                    <View style={{ flexDirection: 'column', alignSelf: 'center', margin: 10 }}>\n                        <TextInput\n                            value={value}\n                            onChangeText={setValue}\n                            placeholder=\"Enter HEX, RGB, or RGBA... \"\n                            style={{...Styling.text_input}}\n                        />\n                        <TouchableOpacity\n                            onPress={() => handleConvert()}\n                            style={{...Styling.button_input}}\n                        >\n                            <Text style={{...Styling.small_text}}>Swap!</Text>\n                        </TouchableOpacity>\n                    </View>\n                    {result &&\n                        <>\n                            <TouchableOpacity\n                                onPress={copyToClipboard}\n                                activeOpacity={1}\n                                style={[\n                                    styles.button,\n                                    isHovered ? Styling.hoveredButton : Styling.normalButton\n                                ]}\n                                onMouseEnter={() => setIsHovered(true)}\n                                onMouseLeave={() => setIsHovered(false)}\n                            >\n\n                                <Text style={{\n                                    ...Styling.small_text, \n                                    margin: HeightRatio(10)\n                                }}>{result}</Text>\n\n                                {copiedText != '' &&\n                                    <Text style={{\n                                        ...Styling.small_text, \n                                        margin: HeightRatio(10)\n                                    }}>Copied!</Text>\n                                }\n\n                                <View style={{\n                                    ...Styling.large_color_block,\n                                    backgroundColor: `${result}`\n                                }}></View>\n\n                            </TouchableOpacity>\n\n                        </>\n                    }\n\n                </View>\n\n\n                <View style={{ ...Styling.palette_container }}>\n                    {gradient.map((c, i) => (\n                        <>\n                            <TouchableOpacity\n                                onPress={() => copyGradientToClipboard(c)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                                onMouseEnter={() => setIsGradientHovered(true)}\n                                onMouseLeave={() => setIsGradientHovered(false)}\n                                key={i}\n                            >\n                                <View key={i} style={{\n                                    backgroundColor: c,\n                                     ...Styling.small_color_block\n                                }}></View>\n                            </TouchableOpacity>\n                        </>\n                    ))}\n                </View>\n                <View style={{ alignSelf: 'center', flexDirection: 'column', margin: '1rem' }}>\n                    <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '2.2rem' }}>{gradientCopiedText}</Text>\n                    {gradientCopiedText != '' &&\n                        <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '1rem', alignSelf: 'center' }}>Copied!</Text>\n                    }\n                </View>\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    button: {\n        padding: 10,\n        borderRadius: 5,\n    },\n    buttonText: {\n        color: '#000',\n        fontSize: 18,\n    },\n    primarySquare: {\n        backgroundColor: 'rgba(255, 255, 255, 0.05)',\n        width: '350px',\n        // height: '13rem',  \n        margin: '0.75rem',\n        borderRadius: '1rem'\n    },\n    square: {\n        backgroundColor: 'rgba(255, 255, 255, 0.05)',\n        width: '80vw',\n        // height: '13rem',\n        margin: '0.75rem',\n        borderRadius: '1rem'\n    },\n    paragraph: {\n        marginVertical: 8,\n        color: 'white', fontFamily: 'Inter_900Black', fontSize: '2vh',\n        width: '78vw',\n        padding: '0.25rem'\n    },\n});","import React from 'react';\n\nexport const hslToRgb = (h, s, l) => {\n    let r, g, b;\n\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p, q, t) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p)\n            t * 6;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n\nexport const hslToHex = (h, s, l) => {\n    s /= 100;\n    l /= 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s,\n        x = c * (1 - Math.abs((h / 60) % 2 - 1)),\n        m = l - c / 2,\n        r = 0,\n        g = 0,\n        b = 0;\n\n    if (0 <= h && h < 60) {\n        r = c; g = x; b = 0;\n    } else if (60 <= h && h < 120) {\n        r = x; g = c; b = 0;\n    } else if (120 <= h && h < 180) {\n        r = 0; g = c; b = x;\n    } else if (180 <= h && h < 240) {\n        r = 0; g = x; b = c;\n    } else if (240 <= h && h < 300) {\n        r = x; g = 0; b = c;\n    } else if (300 <= h && h < 360) {\n        r = c; g = 0; b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n};\n\nexport const hexToHsl = hex => {\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    let r = parseInt(result[1], 16);\n    let g = parseInt(result[2], 16);\n    let b = parseInt(result[3], 16);\n\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    let max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let h, s, l = (max + min) / 2;\n\n    if (max == min) {\n        h = s = 0; // achromatic\n    } else {\n        let d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n        switch (max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];\n};\n\nexport const generatePalette = () => {\n    const hexValues = Array.from({ length: 20 }).map(() => {\n        // Generate a random number between 0 and 16777215 (16777215 is equal to FFFFFF in hexadecimal)\n        const randomNumber = Math.floor(Math.random() * 16777216);\n        // Convert the number to a HEX value and return it\n        return '#' + randomNumber.toString(16).padStart(6, '0');\n    });\n    // Trending colors\n    // const colors = ['#F44336', '#9C27B0', '#3F51B5', '#2196F3', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#FFC107', '#FF9800'];\n    let colors = hexValues;\n\n    // Styles\n    const styles = ['warm', 'cold', 'bright', 'dark', 'pastel', 'vintage', 'triadic', 'complementary', 'gradient'];\n\n    // Generate random colors based on style\n    const style = styles[Math.floor(Math.random() * styles.length)];\n    let paletteColors = [];\n    if (style === 'warm') {\n        paletteColors = colors.slice(0, 5);\n    } else if (style === 'cold') {\n        paletteColors = colors.slice(5, 10);\n    } else if (style === 'bright') {\n        paletteColors = colors.slice(0, 5).concat(colors.slice(5, 10)).sort(() => Math.random() - 0.5);\n    } else if (style === 'dark') {\n        paletteColors = colors.slice(0, 5).concat(colors.slice(5, 10)).sort((a, b) => b.localeCompare(a));\n    } else if (style === 'pastel') {\n        paletteColors = colors.map(color => {\n            // Convert HEX to RGB\n            const [r, g, b] = color.match(/\\w\\w/g).map(x => parseInt(x, 16));\n            // Return pastel version of color as HEX\n            return `#${(((r * 0.7) << 16) | ((g * 0.7) << 8) | (b * 0.7)).toString(16).padStart(6, '0')}`;\n        });\n    } else if (style === 'vintage') {\n        const vintageColors = ['#722f37', '#b69a90', '#d2b6a2', '#e9d4c5', '#eeded3'];\n        paletteColors = vintageColors.sort(() => Math.random() - 0.5);\n    } else if (style === 'triadic') {\n        // Select a random color from the `colors` array\n        const baseColor = colors[Math.floor(Math.random() * colors.length)];\n        // Convert the base color to HSL\n        const [baseHue, baseSaturation, baseLightness] = hexToHsl(baseColor);\n        // Generate the two additional colors by adding or subtracting 120 from the base hue\n        const color1 = hslToHex((baseHue + 120) % 360, baseSaturation, baseLightness);\n        const color2 = hslToHex((baseHue + 240) % 360, baseSaturation, baseLightness);\n        paletteColors = [baseColor, color1, color2];\n    } else if (style === 'complementary') {\n        // Select a random color from the `colors` array\n        const baseColor = colors[Math.floor(Math.random() * colors.length)];\n        // Convert the base color to HSL\n        const [baseHue, baseSaturation, baseLightness] = hexToHsl(baseColor);\n        // Generate the additional color by adding or subtracting 180 from the base hue\n        const color1 = hslToHex((baseHue + 180) % 360, baseSaturation, baseLightness);\n        paletteColors = [baseColor, color1];\n    } else if (style === 'monochromatic') {\n        // Pick a random color from the array\n        const baseColor = colors[Math.floor(Math.random() * colors.length)];\n        // Convert the base color to HSL\n        const [hue, saturation, lightness] = hexToHsl(baseColor);\n        // Generate 5 variations of the base color by adjusting the lightness\n        paletteColors = Array.from({ length: 5 }, (_, i) => {\n            const newLightness = Math.max(0, Math.min(100, lightness + i * 20 - 50));\n            // Convert the modified HSL color back to HEX\n            return hslToHex(hue, saturation, newLightness);\n        });\n    } else if (style === 'gradient') {\n        // Generate two random HEX values\n        const color1 = '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\n        const color2 = '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\n\n        // Create the gradient palette using the random colors\n        paletteColors = [color1, color2];\n    }\n\n\n    // Generate random colors based on golden ratio\n    const goldenRatio = 0.618033988749895;\n    let h = Math.random();\n    paletteColors = paletteColors.concat(\n        Array.from({ length: 5 }).map(() => {\n            h += goldenRatio;\n            h %= 1;\n            // Return HSL as HEX\n            const [r, g, b] = hslToRgb(h, 1, 0.5);\n            return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;\n        })\n    );\n\n    return (paletteColors.slice(0, 8));\n\n};\n\nexport const generateGoldenRatioPalette = (inputColor) => {\n\n    if (inputColor.startsWith('#')) {\n        const [r0, g0, b0, a0] = inputColor.match(/\\w\\w/g).map(x => parseInt(x, 16));\n        let a;\n        // Convert HEX to RGBA\n        const r = parseInt(inputColor.substring(1, 3), 16);\n        const g = parseInt(inputColor.substring(3, 5), 16);\n        const b = parseInt(inputColor.substring(5, 7), 16);\n        if (a0 != undefined) {\n            a = a0;\n        } else {\n            a = 255;\n        }\n\n        // Calculate the golden ratio\n        const phi = (1 + Math.sqrt(5)) / 2;\n\n        // Generate 5 colors based on the golden ratio\n        const color1 = `#${inputColor.substring(1, 7)}`;\n        const color2 = `#${Math.round(r * phi).toString(16)}${Math.round(g * phi).toString(16)}${Math.round(b * phi).toString(16)}`;\n        const color3 = `#${Math.round(r / phi).toString(16)}${Math.round(g / phi).toString(16)}${Math.round(b / phi).toString(16)}`;\n        const color4 = `#${Math.round(r * phi).toString(16)}${Math.round(g / phi).toString(16)}${Math.round(b * phi).toString(16)}`;\n        const color5 = `#${Math.round(r / phi).toString(16)}${Math.round(g * phi).toString(16)}${Math.round(b / phi).toString(16)}`;\n\n        function padHex(hex) {\n            // Check if the HEX value is less than six characters long\n            if (hex.length < 7) {\n                // Pad the HEX value with leading zeros\n                return `#${hex.substring(1, 7).padStart(6, '0')}`;\n            }\n            // Check if the HEX value is longer than six characters\n            else if (hex.length > 7) {\n                // Trim the HEX value to six characters\n                return `#${hex.substring(1, 7)}`;\n            }\n            // Otherwise, return the HEX value as-is\n            return hex;\n        }\n\n\n        // Check the length of each color and pad with leading zeros if necessary\n        const paddedColor1 = padHex(color1);\n        const paddedColor2 = padHex(color2);\n        const paddedColor3 = padHex(color3);\n        const paddedColor4 = padHex(color4);\n        const paddedColor5 = padHex(color5);\n\n        // Return the array of padded colors\n        return [paddedColor1, paddedColor2, paddedColor3, paddedColor4, paddedColor5];\n\n    } else if (inputColor.startsWith('rgba')) {\n        // Convert RGBA to HEX\n        const parts = inputColor.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n        const r0 = parseInt(parts[1]).toString(16).padStart(2, '0');\n        const g0 = parseInt(parts[2]).toString(16).padStart(2, '0');\n        const b0 = parseInt(parts[3]).toString(16).padStart(2, '0');\n        const newHex = `#${r0}${g0}${b0}`;\n\n        const r = parseInt(newHex.substring(1, 3), 16);\n        const g = parseInt(newHex.substring(3, 5), 16);\n        const b = parseInt(newHex.substring(5, 7), 16);\n        const a = 1; // Assume full opacity\n\n        // Calculate the golden ratio\n        const phi = (1 + Math.sqrt(5)) / 2;\n\n        // Generate 5 colors based on the golden ratio\n        const color1 = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n        const color2 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n        const color3 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b / phi).toString(16).padStart(2, '0')}`;\n        const color4 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n        const color5 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n\n        function padHex(hex) {\n            // Check if the HEX value is less than six characters long\n            if (hex.length < 7) {\n                // Pad the HEX value with leading zeros\n                return `#${hex.substring(1, 7).padStart(6, '0')}`;\n            }\n            // Check if the HEX value is longer than six characters\n            else if (hex.length > 7) {\n                // Trim the HEX value to six characters\n                return `#${hex.substring(1, 7)}`;\n            }\n            // Otherwise, return the HEX value as-is\n            return hex;\n        }\n\n\n        // Check the length of each color and pad with leading zeros if necessary\n        const paddedColor1 = padHex(color1);\n        const paddedColor2 = padHex(color2);\n        const paddedColor3 = padHex(color3);\n        const paddedColor4 = padHex(color4);\n        const paddedColor5 = padHex(color5);\n\n        // Return the array of padded colors\n        return [paddedColor1, paddedColor2, paddedColor3, paddedColor4, paddedColor5];\n    } else if (inputColor.startsWith('rgb')) {\n        // Convert RGBA to HEX\n        const parts = inputColor.match(/^rgb?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n        const r0 = parseInt(parts[1]).toString(16).padStart(2, '0');\n        const g0 = parseInt(parts[2]).toString(16).padStart(2, '0');\n        const b0 = parseInt(parts[3]).toString(16).padStart(2, '0');\n        const newHex = `#${r0}${g0}${b0}`;\n\n        const r = parseInt(newHex.substring(1, 3), 16);\n        const g = parseInt(newHex.substring(3, 5), 16);\n        const b = parseInt(newHex.substring(5, 7), 16);\n        const a = 1; // Assume full opacity\n\n        // Calculate the golden ratio\n        const phi = (1 + Math.sqrt(5)) / 2;\n\n        // Generate 5 colors based on the golden ratio\n        const color1 = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n        const color2 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n        const color3 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b / phi).toString(16).padStart(2, '0')}`;\n        const color4 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n        const color5 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n\n        function padHex(hex) {\n            // Check if the HEX value is less than six characters long\n            if (hex.length < 7) {\n                // Pad the HEX value with leading zeros\n                return `#${hex.substring(1, 7).padStart(6, '0')}`;\n            }\n            // Check if the HEX value is longer than six characters\n            else if (hex.length > 7) {\n                // Trim the HEX value to six characters\n                return `#${hex.substring(1, 7)}`;\n            }\n            // Otherwise, return the HEX value as-is\n            return hex;\n        }\n\n\n        // Check the length of each color and pad with leading zeros if necessary\n        const paddedColor1 = padHex(color1);\n        const paddedColor2 = padHex(color2);\n        const paddedColor3 = padHex(color3);\n        const paddedColor4 = padHex(color4);\n        const paddedColor5 = padHex(color5);\n\n        // Return the array of padded colors\n        return [paddedColor1, paddedColor2, paddedColor3, paddedColor4, paddedColor5];\n    }\n}\n\n","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image } from 'react-native';\nimport color from 'color';\nimport * as Clipboard from 'expo-clipboard';\nimport { Styling, HeightRatio } from '../Styling';\nimport { generateGoldenRatioPalette } from '../components/ConversionAlgorithms';\n\nexport const HarmoniousPalette = () => {\n    const [inputColor, setInputColor] = useState('');\n    const [palette, setPalette] = useState([]);\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        // console.log(\"copyToClipboard\")\n        fetchGradientCopiedText();\n    };\n\n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n\n    function handleGeneratePalette() {\n        if (inputColor.startsWith('#') || inputColor.startsWith('rgba') || inputColor.startsWith('rgb')) {\n            const newPalette = generateGoldenRatioPalette(inputColor);\n            setPalette(newPalette);\n        } else {\n            console.log(\"ERROR\")\n        }\n    }\n\n    return (\n        <View\n            style={[\n                Styling.primarySquare,\n                {\n                    shadowOffset: {\n                        width: 10,\n                        height: 10,\n                    },\n                    shadowOpacity: 0.15,\n                    shadowRadius: 10,\n                },\n            ]}\n        >\n            <View style={{ marginLeft: '3rem', marginRight: '3rem', marginTop: '1rem' }}>\n                <Text style={{...Styling.small_text}}>Harmonious Palette</Text>\n                <Text style={{...Styling.small_text, fontSize: HeightRatio(12)}}>(HEX, RGB, RGBA)</Text>\n\n                <View style={{}}>\n                    {inputColor &&\n                        <TouchableOpacity\n                            onPress={() => {\n                                setInputColor('');\n                                setInputColor('');\n                                setPalette([]);\n                                setGradientCopiedText('');\n                            }}\n                            style={{...Styling.close_button}}>\n                            <Image\n                                source={require('../assets/x.png')}\n                                style={{ ...Styling.red_x }}\n                            />\n                        </TouchableOpacity>\n                    }\n                    <View style={{ flexDirection: 'column', alignSelf: 'center', margin: 10 }}>\n\n                        <TextInput\n                            value={inputColor}\n                            onChangeText={text => setInputColor(text)}\n                            placeholder=\"Enter HEX, RGB, RGBA...\"\n                            style={{...Styling.text_input}}\n                        />\n                        <TouchableOpacity\n                            onPress={handleGeneratePalette}\n                            style={{...Styling.button_input}}\n                        >\n                            <Text style={{...Styling.small_text}}>Generate!</Text>\n                        </TouchableOpacity>\n                    </View>\n\n                    <View style={{ alignSelf: 'center', flexDirection: 'column', margin: HeightRatio(10) }}>\n                        <Text style={{ ...Styling.heading_0 }}>{gradientCopiedText}</Text>\n                        {gradientCopiedText != '' &&\n                            <Text style={{ ...Styling.small_text }}>Copied!</Text>\n                        }\n                    </View>\n                    <View style={{ ...Styling.palette_container }}>\n                        {palette.map((color) => (\n                            <>\n                                <TouchableOpacity\n                                    onPress={() => copyGradientToClipboard(color)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                                    onMouseEnter={() => setIsGradientHovered(true)}\n                                    onMouseLeave={() => setIsGradientHovered(false)}\n                                    key={color}\n                                >\n                                    <View key={color} style={{\n                                        backgroundColor: color,\n                                        ...Styling.small_color_block\n                                    }}></View>\n                                </TouchableOpacity>\n                            </>\n                        ))}\n                    </View>\n                    \n                </View>\n            </View>\n        </View>\n    );\n}\n","import React, { useState } from 'react';\nimport { View, Text, Button, StyleSheet, TouchableOpacity } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\nimport { HeightRatio, Styling } from '../Styling';\nimport { hslToRgb, hslToHex, hexToHsl, generatePalette} from '../components/ConversionAlgorithms';\n\nexport const RandomPalette = () => {\n    const [palette, setPalette] = useState([]);\n    const [copiedCode, setCopiedCode] = useState('');\n\n    const copyColorCode = async (color) => {\n        await Clipboard.setStringAsync(color);\n        fetchCopyColorCode();\n\n    };\n    const fetchCopyColorCode = async () => {\n        const color = await Clipboard.getStringAsync();\n        setCopiedCode(color);\n    };\n\n    return (\n        <>\n            <View\n                style={[\n                    Styling.primarySquare,\n                    {\n                        shadowOffset: {\n                            width: 10,\n                            height: 10,\n                        },\n                        shadowOpacity: 0.15,\n                        shadowRadius: 10,\n                    },\n                ]}\n            >\n                <View style={styles.container}>\n                    <Text style={{...Styling.small_text}}>\n                        Random Palette\n                    </Text>\n                    <Text style={{\n                        ...Styling.small_text, \n                        ...Styling.accent_color, \n                        margin: HeightRatio(10)\n                    }}>Try it out!</Text>\n                    <TouchableOpacity\n                        onPress={() => { setCopiedCode(''); setPalette(generatePalette()); }}\n                        style={{\n                            backgroundColor: '#ff1654',\n                            padding: '10px',\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderWidth: 4,\n                            borderRadius: 10,\n                            marginBottom: 4,\n                            width: '20rem'\n                        }}\n                    >\n                        <Text style={{...Styling.small_text}}>Generate!</Text>\n\n                    </TouchableOpacity>\n                    <Text style={{\n                        ...Styling.small_text, \n                        margin: HeightRatio(10)\n                    }}>{copiedCode}</Text>\n                    {copiedCode != '' &&\n                        <>\n                            <Text style={{\n                                ...Styling.small_text, \n                                margin: HeightRatio(10)\n                            }}>Copied!</Text>\n                            <View style={{\n                                ...Styling.large_color_block,\n                                backgroundColor: `${copiedCode}`\n                            }}></View>\n                        </>\n                    }\n\n                    <View style={{...Styling.circle_palette_container, margin: HeightRatio(10)}}>\n                        {palette.map((color, index) => (\n                            <TouchableOpacity key={index} onPress={() => copyColorCode(color)}>\n                                <View style={[Styling.circle_color, { backgroundColor: color }]} />\n                            </TouchableOpacity>\n                        ))}\n                    </View>\n                    \n\n                </View>\n            </View>\n        </>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        margin: '1rem'\n    },\n});\n\n\n","import React, { useEffect, useState } from 'react';\nimport { View, Text, Button, StyleSheet, TouchableOpacity } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\nimport { Styling, HeightRatio, WidthRatio } from '../Styling';\nimport { hslToRgb, hslToHex, hexToHsl, generatePalette} from '../components/ConversionAlgorithms';\n\nexport const RandomPaletteArray = () => {\n    const [palette, setPalette] = useState([]);\n    const [copiedCode, setCopiedCode] = useState('');\n    const [palettes, setPalettes] = useState([]); // New state variable to store generated palettes\n\n    const copyColorCode = async (color) => {\n        // Clipboard.setString(color);\n        await Clipboard.setStringAsync(color);\n        fetchCopyColorCode();\n\n    };\n    const fetchCopyColorCode = async () => {\n        const color = await Clipboard.getStringAsync();\n        setCopiedCode(color);\n    };\n\n    const HandleDisplayPalettes = () => {\n\n    }\n\n    useEffect(() => {\n\n        for (let i = 0; i < 10; i++) {\n            let paletteColors = generatePalette();\n            setPalettes(previous => [...previous, paletteColors])\n            \n        }\n\n    }, [])\n    // useEffect(() => {\n    //     console.log(palettes)\n    // }, [palettes])\n\n\n    return (\n        <>\n            <View style={styles.container}>\n                \n                {copiedCode != '' ?\n                    <>\n                        <Text style={{\n                            ...Styling.small_text, \n                            marginBottom: HeightRatio(10)\n                        }}>{copiedCode}</Text>\n                        <Text style={{\n                            ...Styling.small_text, \n                            margin: HeightRatio(10)\n                        }}>Copied!</Text>\n                        <View style={{\n                            ...Styling.large_color_block,\n                            backgroundColor: `${copiedCode}`\n                        }}></View>\n                    </>\n                    :\n                    null\n                }\n                <View style={{...Styling.circle_palette_container, width: WidthRatio(300)}}>\n                    {palettes.map((num, i) => (\n                        <>\n                            <View style={{...Styling.circle_palette_box}} key={i} >\n                                {palettes[i].map((color, index) => (\n                                    <TouchableOpacity key={index} onPress={() => copyColorCode(color)}>\n                                        <View key={index} style={[Styling.circle_color, { backgroundColor: color }]} />\n                                    </TouchableOpacity>\n                                ))}\n                            </View>\n                        </>\n                    ))}\n                </View>\n            </View>\n        </>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n});\n\n\n","import React, { useEffect, useState } from 'react';\nimport { View, Text, Image } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { ConvertTool } from './utils/ConvertTool';\nimport { HarmoniousPalette } from './utils/HarmoniousPalette';\nimport { RandomPalette } from './utils/RandomPalette';\nimport { RandomPaletteArray } from './utils/RandomPaletteArray';\nimport { HeightRatio, Styling, WidthRatio } from './Styling';\n\nexport const Index = () => {\n\n    let [fontsLoaded] = useFonts({ Inter_900Black, });\n    if (!fontsLoaded) { return null; }\n\n    return (\n        <>\n            <View style={{ ...Styling.content_container }}>\n\n                <View style={{ flexDirection: 'column', width: '60vw', margin: HeightRatio(10) }}>\n                    <Image\n                        source={require('./assets/cycle.png')}\n                        style={{\n                            height: HeightRatio(150),\n                            width: HeightRatio(150),\n                            justifyContent: 'center',\n                            alignSelf: 'center'\n                        }}\n                        accessibilityLabel=\"Circular image with arcing arrows drawn between HEX, RGBA, and the Color Palette.\"\n                    />\n\n                </View>\n                <View style={{\n                    flexDirection: 'column',\n                    width: WidthRatio(280),\n                    margin: HeightRatio(10)\n                }}>\n                    <Text style={Styling.heading_0}>\n                        Jump from HEX to RGBA to Color Palette!\n                    </Text>\n                    <Text style={{\n                        ...Styling.heading_0,\n                        fontSize: HeightRatio(20),\n                        width: '85%'\n                    }}>\n                        Use colors consistently across different platforms and systems, customize the appearance of colors, and work with the color model that is most convenient for you.\n                    </Text>\n                </View>\n            </View>\n\n            {/* TOOLS HEADER */}\n            <View style={{ ...Styling.content_container, marginTop: HeightRatio(20) }}>\n                <View style={{ flexDirection: 'column', }}>\n                    <View style={{\n                        flexDirection: 'column',\n                        justifyContent: 'center',\n                        marginTop: HeightRatio(10),\n                        width: '90vw'\n                    }}>\n                        <Text style={Styling.heading_0}>\n                            Tools\n                        </Text>\n                        <View style={Styling.division_line} />\n                    </View>\n                </View>\n            </View>\n            <View style={{ ...Styling.content_container, width: WidthRatio(300) }}>\n                <View style={{ flexDirection: 'column', alignSelf: 'center' }}>\n                    <View style={{ ...Styling.content_container }}>\n                        <ConvertTool />\n                    </View>\n\n                </View>\n                <View style={{ flexDirection: 'column', alignSelf: 'center' }}>\n                    <View style={{ ...Styling.content_container }}>\n                        <HarmoniousPalette />\n                    </View>\n                </View>\n                <View style={{ flexDirection: 'column' }}>\n                    <View style={{ ...Styling.content_container }}>\n                        <RandomPalette />\n                    </View>\n                </View>\n            </View>\n\n            {/* COLOR PALETTA INSPIRATION */}\n            <View style={{ ...Styling.content_container, marginTop: HeightRatio(20) }}>\n                <View style={{ flexDirection: 'column' }}>\n                    <Text style={{ ...Styling.heading_0, width: WidthRatio(300) }}>\n                        Color Palette Inspiration\n                    </Text>\n                    <Text style={{\n                        ...Styling.heading_0,\n                        ...Styling.accent_color,\n                        fontSize: HeightRatio(20)\n                    }}>\n                        Click a Color to Copy!\n                    </Text>\n                    <View style={Styling.division_line} />\n                    <View style={{ alignSelf: 'center', marginTop: '1rem' }}></View>\n                </View>\n            </View>\n            <View style={{ ...Styling.content_container }}>\n                <View style={{ flexDirection: 'column', alignSelf: 'center' }}>\n                    <View style={{ ...Styling.content_container }}>\n                        <RandomPaletteArray />\n                    </View>\n                </View>\n            </View>\n        </>\n\n    );\n};\n\n\n\n\n\n\n","import React from 'react';\nimport { Text, View, RefreshControl } from 'react-native';\nimport { Index } from './Index'\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Styling, WidthRatio, HeightRatio } from './Styling';\n\nconst wait = (timeout) => {\n  return new Promise(resolve => setTimeout(resolve, timeout));\n}\n\nfunction HomeScreen({ navigation }) {\n  const [refreshing, setRefreshing] = React.useState(false);\n\n  const onRefresh = React.useCallback(() => {\n    setRefreshing(true);\n    wait(2000).then(() => setRefreshing(false));\n  }, []);\n\n  return (\n    <LinearGradient\n      colors={['#1b262c', '#070707']}\n      style={{ opacity: 1, width: '100%', alignSelf: 'center' }}\n      start={[0.0, 0.0]} end={[0.75, 0.5]}\n    >\n      {/* HEADER */}\n      <View style={{\n        // height: HeightRatio(1),\n        width: WidthRatio(300),\n        alignSelf: 'center'\n      }}>\n        <Text style={Styling.heading_0}>\n          HEX to RGBA <strong style={Styling.accent_color}>Pro</strong>\n        </Text>\n        <View style={Styling.division_line} />\n      </View>\n\n      {/* BODY */}\n      <Index />\n\n      {/* FOOTER */}\n      <View style={Styling.division_line} />\n      <View style={{ alignSelf: 'center', marginTop: HeightRatio(50) }}>\n        <Text style={{ ...Styling.heading_0, fontSize: HeightRatio(20) }}>\n          HEX to RGBA Pro  |  Made with &#x2665;\n        </Text>\n      </View>\n\n      <View style={{ height: HeightRatio(40) }} />\n    </LinearGradient>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Color Converter - Hex to RGBA - HTML Color Picker and Pelette\">\n        <Stack.Screen\n          name=\"Color Converter - Hex to RGBA - HTML Color Picker and Pelette\"\n          component={HomeScreen}\n          options={{\n            animationEnabled: false,\n            headerShown: false,\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/cycle.a5efb9c7.png\";"],"sourceRoot":""}