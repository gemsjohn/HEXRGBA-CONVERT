{"version":3,"sources":["assets/x.png","utils/GetColorGradient.js","Palette.js","Convert.js","Blog.js","Layout.js","App.js","assets/favicon.png"],"names":["module","exports","GetColorGradient","color","chroma","scale","brighten","darken","colors","Palette","useState","inputColor","setInputColor","palette","setPalette","React","gradientCopiedText","setGradientCopiedText","setIsGradientHovered","copyGradientToClipboard","input","Clipboard","console","log","fetchGradientCopiedText","text","View","style","marginLeft","marginRight","marginTop","Text","fontFamily","fontSize","alignSelf","TouchableOpacity","onPress","height","width","borderRadius","position","zIndex","backgroundColor","top","left","Image","source","require","flexDirection","margin","TextInput","value","onChangeText","placeholder","outline","display","justifyContent","padding","border","borderColor","borderWidth","borderBottomWidth","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","startsWith","newPalette","r","parseInt","substring","g","b","phi","Math","sqrt","color1","color2","round","toString","color3","color4","color5","padHex","hex","length","padStart","parts","match","newHex","generateGoldenRatioPalette","borderTopWidth","marginBottom","flexWrap","map","onMouseEnter","onMouseLeave","Dimensions","get","Convert","setValue","result","setResult","gradient","setGradient","isHovered","setIsHovered","copiedText","setCopiedText","data","styles","paragraph","useFonts","Inter_900Black","copyToClipboard","fetchCopiedText","fontWeight","textAlign","primarySquare","shadowOffset","shadowOpacity","shadowRadius","slice","handleConvert","activeOpacity","button","hoveredButton","normalButton","c","i","item","square","StyleSheet","create","buttonText","marginVertical","SCREEN_HEIGHT","scaleHeight","HeightRatio","size","newSize","PixelRatio","roundToNearestPixel","HomeScreen","navigation","setRefreshing","useCallback","timeout","Promise","resolve","setTimeout","then","LinearGradient","opacity","start","end","borderBottomColor","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","name","component","options","animationEnabled","headerShown","container","alignItems"],"mappings":"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","file":"static/js/app.eafc7b77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.bc64bca0.png\";","import chroma from 'chroma-js';\n\nexport const GetColorGradient = (color) => {\n  const scale = chroma.scale([chroma(color).brighten(2), color, chroma(color).darken(2)]);\n  return scale.colors(10);\n};","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image } from 'react-native';\nimport color from 'color';\nimport * as Clipboard from 'expo-clipboard';\n\nexport const Palette = () => {\n    const [inputColor, setInputColor] = useState('');\n    const [palette, setPalette] = useState([]);\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n\n\n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        console.log(\"copyToClipboard\")\n        fetchGradientCopiedText();\n    };\n\n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n\n\n\n    function generateGoldenRatioPalette(inputColor) {\n\n        if (inputColor.startsWith('#')) {\n            // Convert HEX to RGBA\n            const r = parseInt(inputColor.substring(1, 3), 16);\n            const g = parseInt(inputColor.substring(3, 5), 16);\n            const b = parseInt(inputColor.substring(5, 7), 16);\n            const a = 1; // Assume full opacity\n\n            // Calculate the golden ratio\n            const phi = (1 + Math.sqrt(5)) / 2;\n\n            // Generate 5 colors based on the golden ratio\n            const color1 = `#${inputColor.substring(1, 7)}`;\n            const color2 = `#${Math.round(r * phi).toString(16)}${Math.round(g * phi).toString(16)}${Math.round(b * phi).toString(16)}`;\n            const color3 = `#${Math.round(r / phi).toString(16)}${Math.round(g / phi).toString(16)}${Math.round(b / phi).toString(16)}`;\n            const color4 = `#${Math.round(r * phi).toString(16)}${Math.round(g / phi).toString(16)}${Math.round(b * phi).toString(16)}`;\n            const color5 = `#${Math.round(r / phi).toString(16)}${Math.round(g * phi).toString(16)}${Math.round(b / phi).toString(16)}`;\n\n            function padHex(hex) {\n                // Check if the HEX value is less than six characters long\n                if (hex.length < 7) {\n                    // Pad the HEX value with leading zeros\n                    return `#${hex.substring(1, 7).padStart(6, '0')}`;\n                }\n                // Check if the HEX value is longer than six characters\n                else if (hex.length > 7) {\n                    // Trim the HEX value to six characters\n                    return `#${hex.substring(1, 7)}`;\n                }\n                // Otherwise, return the HEX value as-is\n                return hex;\n            }\n\n\n            // Check the length of each color and pad with leading zeros if necessary\n            const paddedColor1 = padHex(color1);\n            const paddedColor2 = padHex(color2);\n            const paddedColor3 = padHex(color3);\n            const paddedColor4 = padHex(color4);\n            const paddedColor5 = padHex(color5);\n\n            // Return the array of padded colors\n            return [paddedColor1, paddedColor2, paddedColor3, paddedColor4, paddedColor5];\n\n        } else if (inputColor.startsWith('rgba')) {\n            console.log(\"STARTS WITH\")\n            // Convert RGBA to HEX\n            const parts = inputColor.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r0 = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g0 = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b0 = parseInt(parts[3]).toString(16).padStart(2, '0');\n            const newHex = `#${r0}${g0}${b0}`;\n\n            const r = parseInt(newHex.substring(1, 3), 16);\n            const g = parseInt(newHex.substring(3, 5), 16);\n            const b = parseInt(newHex.substring(5, 7), 16);\n            const a = 1; // Assume full opacity\n\n            // Calculate the golden ratio\n            const phi = (1 + Math.sqrt(5)) / 2;\n\n            // Generate 5 colors based on the golden ratio\n            const color1 = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n            const color2 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color3 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b / phi).toString(16).padStart(2, '0')}`;\n            const color4 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color5 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n\n            function padHex(hex) {\n                // Check if the HEX value is less than six characters long\n                if (hex.length < 7) {\n                    // Pad the HEX value with leading zeros\n                    return `#${hex.substring(1, 7).padStart(6, '0')}`;\n                }\n                // Check if the HEX value is longer than six characters\n                else if (hex.length > 7) {\n                    // Trim the HEX value to six characters\n                    return `#${hex.substring(1, 7)}`;\n                }\n                // Otherwise, return the HEX value as-is\n                return hex;\n            }\n\n\n            // Check the length of each color and pad with leading zeros if necessary\n            const paddedColor1 = padHex(color1);\n            const paddedColor2 = padHex(color2);\n            const paddedColor3 = padHex(color3);\n            const paddedColor4 = padHex(color4);\n            const paddedColor5 = padHex(color5);\n\n            // Return the array of padded colors\n            return [paddedColor1, paddedColor2, paddedColor3, paddedColor4, paddedColor5];\n        }\n    }\n\n    function handleGeneratePalette() {\n        if (inputColor.startsWith('#') || inputColor.startsWith('rgba')) {\n            const newPalette = generateGoldenRatioPalette(inputColor);\n            setPalette(newPalette);\n        } else {\n            console.log(\"ERROR\")\n        }\n    }\n\n    return (\n        <View style={{marginLeft: '3rem', marginRight: '3rem', marginTop: '1rem'}}>\n            <Text style={{\n                fontFamily: 'Inter_900Black',\n                fontSize: '20px',\n                alignSelf: 'center',\n                color: 'white'\n            }}>Custom Palette</Text>\n\n            <View style={{}}>\n                {inputColor &&\n                    <TouchableOpacity\n                        onPress={() => {\n                            setInputColor('');\n                            setInputColor('');\n                            setPalette([]);\n                            setGradientCopiedText('');\n                        }}\n                        style={{\n                            height: '4vh',\n                            width: '4vh',\n                            borderRadius: 10,\n                            position: 'absolute',\n                            zIndex: 10,\n                            backgroundColor: '#ff1654',\n                            top: '1vh',\n                            left: '-5vh'\n                        }}>\n                        <Image\n                            source={require('./assets/x.png')}\n                            style={{ height: 15, width: 15, alignSelf: 'center', marginTop: '1.3vh', marginLeft: '0.1vh' }}\n                        />\n                    </TouchableOpacity>\n                }\n                <View style={{ flexDirection: 'column', alignSelf: 'center', margin: 10 }}>\n\n                    <TextInput\n                        value={inputColor}\n                        onChangeText={text => setInputColor(text)}\n                        placeholder=\"Enter HEX or RGBA value\"\n                        style={{\n                            outline: 'none',\n                            backgroundColor: 'transparent',\n                            color: 'white',\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            padding: 30,\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderWidth: 4,\n                            borderBottomWidth: 2,\n                            borderTopLeftRadius: 30,\n                            borderBottomLeftRadius: 0,\n                            borderTopRightRadius: 30,\n                            borderBottomRightRadius: 0,\n                            alignSelf: 'center',\n                            marginTop: 10,\n                            // marginBottom: 4,\n                            width: '20rem',\n                            fontSize: '1.8vh',\n                            fontFamily: 'Inter_900Black'\n                        }}\n                    />\n                    <TouchableOpacity\n                        onPress={handleGeneratePalette}\n                        style={{\n                            backgroundColor: '#ff1654',\n                            padding: '1vh',\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderWidth: 4,\n                            borderTopWidth: 2,\n                            borderTopLeftRadius: 0,\n                            borderBottomLeftRadius: 30,\n                            borderTopRightRadius: 0,\n                            borderBottomRightRadius: 30,\n                            // marginTop: 10,\n                            marginBottom: 4,\n                            width: '20rem'\n                        }}\n                    >\n                        <Text style={{\n                            color: 'white',\n                            marginTop: '0.5vh',\n                            fontSize: '2vh',\n                            fontFamily: 'Inter_900Black',\n                            alignSelf: 'center'\n                        }}>Generate!</Text>\n                    </TouchableOpacity>\n                </View>\n                {/* <Button onPress={() => console.log(\"Generate\")} title=\"Generate Palette\" /> */}\n                {/* {palette.map(color => (\n                <View style={{ backgroundColor: color, height: 50, width: 50 }} />\n            ))} */}\n\n\n\n                <View style={{ flexDirection: 'row', flexWrap: 'wrap', width: '22rem', alignSelf: 'center', justifyContent: 'center' }}>\n                    {palette.map((color) => (\n                        <>\n                            <TouchableOpacity\n                                onPress={() => copyGradientToClipboard(color)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                                onMouseEnter={() => setIsGradientHovered(true)}\n                                onMouseLeave={() => setIsGradientHovered(false)}\n                                key={color}\n                            >\n                                <View key={color} style={{\n                                    backgroundColor: color,\n                                    height: 50,\n                                    width: 75,\n                                    borderWidth: 1,\n                                    borderRadius: 6,\n                                    borderColor: 'rgba(100, 100, 100, 0.25)',\n                                }}></View>\n                            </TouchableOpacity>\n                        </>\n                    ))}\n                </View>\n                <View style={{ alignSelf: 'center', flexDirection: 'column', margin: '1rem' }}>\n                    <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '2.2rem' }}>{gradientCopiedText}</Text>\n                    {gradientCopiedText != '' &&\n                        <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '1rem', alignSelf: 'center' }}>Copied!</Text>\n                    }\n                </View>\n            </View>\n        </View>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image, Color } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './utils/GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\nimport { Palette } from './Palette';\nimport { EyeDropper } from './Eyedropper';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const Convert = () => {\n    const [value, setValue] = useState('')\n    const [result, setResult] = useState('');\n    const [color, setColor] = useState('');\n    const [gradient, setGradient] = useState([]);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n    const [copiedText, setCopiedText] = React.useState('');\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n    const [squares, setSquares] = useState([]);\n    const data = [\n        {\n            data: \n                <View style={{alignSelf: 'center'}}>\n                    <Text style={{...styles.paragraph, color: '#00b4d8'}}>\n                    RGBA (Red Green Blue Alpha) \n                    </Text>\n                    <Text style={styles.paragraph}>\n                        RGBA stands for Red Green Blue Alpha, which is a color model used in digital design and programming to \n                        specify colors with an added alpha channel for transparency. Like the RGB model, RGBA uses a combination \n                        of letters and numbers to represent specific colors, but with the added alpha channel, RGBA codes consist \n                        of four values instead of three. The alpha channel represents the level of transparency, with 0 being \n                        fully transparent and 1 being fully opaque.\n                    </Text>\n                    <Text style={styles.paragraph}>\n                        For example, the RGBA code for red with 50% transparency would be \"rgba(255,0,0,0.5)\". In this case, the \n                        red value is 255 (fully intense), the green and blue values are 0 (no intensity), and the alpha value is 0.5 (50% transparency).\n                    </Text>\n                    <Text style={styles.paragraph}>\n                        One key difference between RGBA and RGB is the inclusion of the alpha channel in RGBA, which allows for the specification of \n                        transparent colors. This can be useful for creating layered or blended effects in digital design. RGB, on the other hand, does \n                        not have an alpha channel and is limited to solid, opaque colors.\n                    </Text>\n                    {/* <View style={{borderBottomColor: 'white', borderBottomWidth: 4, marginTop: '1rem', marginBottom: '1rem'}}></View> */}\n                </View>\n        },\n        {\n            data:\n            <View style={{alignSelf: 'center'}}>\n                <Text style={{...styles.paragraph, color: '#00b4d8'}}>\n                Hexidecimal \n                </Text>\n                <Text style={styles.paragraph}>\n                    Hex color codes are a widely used method in digital design and programming to specify colors \n                    for web pages, graphics, and user interfaces. These codes consist of a six-digit combination of \n                    letters and numbers that represent a specific color using the RGB (red, green, blue) color model. \n                    Each color is represented by a two-digit hexadecimal number, with 00 being the lowest intensity \n                    and FF being the highest intensity. For example, the hex color code for red is \"#FF0000\", green \n                    is \"#00FF00\", and blue is \"#0000FF\". In addition to these primary colors, hex color codes can be \n                    combined to create a wide range of colors, such as \"#FFFFFF\" for white, \"#000000\" for black, and \n                    \"#9ACD32\" for yellow.\n                </Text>\n            </View>\n        },\n        {\n            data:\n            <View style={{alignSelf: 'center'}}>\n                <Text style={{...styles.paragraph, color: '#00b4d8'}}>\n                    Complementary Colors\n                </Text>\n                <Text style={styles.paragraph}>\n                    Certain colors and hues can work well together and appear to be complementary \n                    because of the way that the colors are arranged on the color wheel. The color \n                    wheel is a visual representation of the colors of the visible spectrum arranged in a circle.\n                </Text>\n                <Text style={styles.paragraph}>\n                    There are a few different ways that colors can be arranged on the color wheel, but one common \n                    way is to arrange the primary colors (red, yellow, and blue) around the wheel, with the secondary \n                    colors (orange, green, and purple) between the primary colors. The tertiary colors \n                    (yellow-green, blue-green, blue-purple, red-purple, red-orange, and yellow-orange) are \n                    located between the primary and secondary colors on the wheel.\n                </Text>\n                <Text style={styles.paragraph}>\n                    Colors that are located opposite each other on the color wheel are known as complementary colors. \n                    These colors tend to work well together because they are highly contrasting, which can create a \n                    visually appealing balance. For example, red and green are complementary colors, as are blue and orange.\n                </Text>\n                <Text style={styles.paragraph}>\n                    There are several theories about why certain color combinations are pleasing to the eye, and some of \n                    these theories involve mathematical principles such as the golden ratio. However, the exact reasons \n                    for why certain color combinations are perceived as being harmonious or complementary are still not \n                    fully understood and are the subject of ongoing research in fields such as psychology and neuroscience.\n                </Text>\n            </View>\n        }\n\n    ]; // example data array\n    let [fontsLoaded] = useFonts({ Inter_900Black, });\n    if (!fontsLoaded) { return null; }\n\n\n\n\n\n\n\n\n\n    const handleGenerate = () => {\n        setGradient(GetColorGradient(color));\n    };\n\n    // Primary Color\n    const copyToClipboard = async () => {\n        await Clipboard.setStringAsync(result);\n        console.log(\"copyToClipboard\")\n        fetchCopiedText();\n    };\n\n    const fetchCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setCopiedText(text);\n    };\n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        console.log(\"copyToClipboard\")\n        fetchGradientCopiedText();\n    };\n\n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n    const handleConvert = () => {\n        setCopiedText('')\n        if (value.startsWith('#')) {\n            // Convert HEX to RGBA\n            const r = parseInt(value.slice(1, 3), 16);\n            const g = parseInt(value.slice(3, 5), 16);\n            const b = parseInt(value.slice(5, 7), 16);\n            const a = 1; // Assume full opacity\n            setResult(`rgba(${r}, ${g}, ${b}, ${a})`);\n            setGradient(GetColorGradient(`rgba(${r}, ${g}, ${b}, ${a})`))\n        } else if (value.startsWith('rgba')) {\n            setGradient(GetColorGradient(value))\n            // Convert RGBA to HEX\n            const parts = value.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b = parseInt(parts[3]).toString(16).padStart(2, '0');\n            setResult(`#${r}${g}${b}`);\n        }\n    };\n\n\n\n\n\n\n    return (\n        <>\n            <View style={{ flexDirection: 'row', flexWrap: 'wrap', alignSelf: 'center', justifyContent: 'center' }}>\n\n\n                {/* <View style={{marginLeft: '3rem', marginRight: '3rem', marginTop: '3rem'}}>\n                <View style={{}}>\n                <EyeDropper/>\n                </View>\n            </View> */}\n\n                <View style={{ flexDirection: 'row', flexWrap: 'wrap', width: '100vw', alignSelf: 'center', justifyContent: 'center' }}>\n                    <View style={{ flexDirection: 'column', width: '400px', margin: '2rem' }}>\n                        <Text style={{ color: 'white', alignSelf: 'center', marginTop: '0.8rem', fontSize: '50px', fontWeight: 'bold', textAlign: 'center', fontFamily: 'Inter_900Black', }}>Jump from HEX to RGBA to color palette!</Text>\n                        <Text style={{ color: 'white', alignSelf: 'center', marginTop: '0.8rem', fontSize: '18px', fontWeight: 'bold', textAlign: 'center', fontFamily: 'Inter_900Black', width: '350px', marginTop: '10px' }}>\n                            Uuse colors consistently across different platforms and systems, customize the appearance of colors, and work with the color model that is most convenient for you.\n                        </Text>\n\n                    </View>\n\n\n                    <View style={{ flexDirection: 'column', height: '100%', width: '400px', margin: '2rem' }}>\n                        <View style={{ flexDirection: 'row', flexWrap: 'wrap', alignSelf: 'center', justifyContent: 'center' }}>\n                            <View\n\n                                style={[\n                                    styles.primarySquare,\n                                    {\n                                        shadowOffset: {\n                                            width: 10,\n                                            height: 10,\n                                        },\n                                        shadowOpacity: 0.15,\n                                        shadowRadius: 10,\n                                    },\n                                ]}\n                            >\n                                <View style={{ marginLeft: '3rem', marginRight: '3rem', marginTop: '1rem' }}>\n                                    <Text style={{\n                                        fontFamily: 'Inter_900Black',\n                                        fontSize: '20px',\n                                        alignSelf: 'center',\n                                        color: 'white'\n                                    }}>Convert HEX or RGBA</Text>\n\n                                    <View style={{}}>\n                                        {value &&\n                                            <TouchableOpacity\n                                                onPress={() => {\n                                                    setValue('');\n                                                    setResult('');\n                                                    setGradient([]);\n                                                    setGradientCopiedText('');\n                                                }}\n                                                style={{\n                                                    height: '4vh',\n                                                    width: '4vh',\n                                                    borderRadius: 10,\n                                                    position: 'absolute',\n                                                    zIndex: 10,\n                                                    backgroundColor: '#ff1654',\n                                                    top: '1vh',\n                                                    left: '-5vh'\n                                                }}>\n                                                <Image\n                                                    source={require('./assets/x.png')}\n                                                    style={{ height: 15, width: 15, alignSelf: 'center', marginTop: '1.3vh', marginLeft: '0.1vh' }}\n                                                />\n                                            </TouchableOpacity>\n                                        }\n                                        <View style={{ flexDirection: 'column', alignSelf: 'center', margin: 10 }}>\n                                            <TextInput\n                                                value={value}\n                                                onChangeText={setValue}\n                                                placeholder=\"Enter HEX or RGBA value\"\n                                                style={{\n                                                    outline: 'none',\n                                                    backgroundColor: 'transparent',\n                                                    color: 'white',\n                                                    display: 'flex',\n                                                    justifyContent: 'flex-start',\n                                                    padding: 30,\n                                                    border: 'solid',\n                                                    borderColor: 'white',\n                                                    borderWidth: 4,\n                                                    borderBottomWidth: 2,\n                                                    borderTopLeftRadius: 30,\n                                                    borderBottomLeftRadius: 0,\n                                                    borderTopRightRadius: 30,\n                                                    borderBottomRightRadius: 0,\n                                                    alignSelf: 'center',\n                                                    marginTop: 10,\n                                                    // marginBottom: 4,\n                                                    width: '20rem',\n                                                    fontSize: '1.8vh',\n                                                    fontFamily: 'Inter_900Black'\n                                                }}\n                                            />\n                                            <TouchableOpacity\n                                                onPress={() => handleConvert()}\n                                                style={{\n                                                    backgroundColor: '#ff1654',\n                                                    padding: '1vh',\n                                                    border: 'solid',\n                                                    borderColor: 'white',\n                                                    borderWidth: 4,\n                                                    borderTopWidth: 2,\n                                                    borderTopLeftRadius: 0,\n                                                    borderBottomLeftRadius: 30,\n                                                    borderTopRightRadius: 0,\n                                                    borderBottomRightRadius: 30,\n                                                    // marginTop: 10,\n                                                    marginBottom: 4,\n                                                    width: '20rem'\n                                                }}\n                                            >\n                                                <Text style={{\n                                                    color: 'white',\n                                                    marginTop: '0.5vh',\n                                                    fontSize: '2vh',\n                                                    fontFamily: 'Inter_900Black',\n                                                    alignSelf: 'center'\n                                                }}>Swap!</Text>\n                                            </TouchableOpacity>\n                                        </View>\n                                        {result &&\n                                            <>\n                                                <TouchableOpacity\n                                                    onPress={copyToClipboard}\n                                                    activeOpacity={1}\n                                                    style={[\n                                                        styles.button,\n                                                        isHovered ? styles.hoveredButton : styles.normalButton\n                                                    ]}\n                                                    onMouseEnter={() => setIsHovered(true)}\n                                                    onMouseLeave={() => setIsHovered(false)}\n                                                >\n\n                                                    <Text style={{\n                                                        color: 'white',\n                                                        fontSize: 18,\n                                                        fontFamily: 'Inter_900Black',\n                                                        alignSelf: 'center',\n                                                        marginBottom: '1rem'\n                                                        // width: '200px'\n                                                        // margin: '1rem'\n                                                    }}>{result}</Text>\n\n                                                    {copiedText != '' &&\n                                                        <Text style={{\n                                                            color: 'white',\n                                                            fontSize: 20,\n                                                            margin: '0.5rem',\n                                                            fontFamily: 'Inter_900Black',\n                                                            alignSelf: 'center'\n                                                        }}>Copied!</Text>\n                                                    }\n\n                                                    <View style={{\n                                                        width: '100px',\n                                                        alignSelf: 'center',\n                                                        height: '100px',\n                                                        borderRadius: 6,\n                                                        borderWidth: 1,\n                                                        borderColor: 'rgba(100, 100, 100, 0.25)',\n                                                        backgroundColor: `${result}`\n                                                    }}></View>\n\n                                                </TouchableOpacity>\n\n                                            </>\n                                        }\n\n                                    </View>\n\n\n                                    <View style={{ flexDirection: 'row', flexWrap: 'wrap', width: '22rem', alignSelf: 'center', justifyContent: 'center' }}>\n                                        {gradient.map((c, i) => (\n                                            <>\n                                                <TouchableOpacity\n                                                    onPress={() => copyGradientToClipboard(c)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                                                    onMouseEnter={() => setIsGradientHovered(true)}\n                                                    onMouseLeave={() => setIsGradientHovered(false)}\n                                                    key={i}\n                                                >\n                                                    <View key={i} style={{\n                                                        backgroundColor: c,\n                                                        height: 50,\n                                                        width: 75,\n                                                        borderWidth: 1,\n                                                        borderRadius: 6,\n                                                        borderColor: 'rgba(100, 100, 100, 0.25)',\n                                                    }}></View>\n                                                </TouchableOpacity>\n                                            </>\n                                        ))}\n                                    </View>\n                                    <View style={{ alignSelf: 'center', flexDirection: 'column', margin: '1rem' }}>\n                                        <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '2.2rem' }}>{gradientCopiedText}</Text>\n                                        {gradientCopiedText != '' &&\n                                            <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '1rem', alignSelf: 'center' }}>Copied!</Text>\n                                        }\n                                    </View>\n                                </View>\n                            </View>\n\n                            <View\n                                style={[\n                                    styles.primarySquare,\n                                    {\n                                        shadowOffset: {\n                                            width: 10,\n                                            height: 10,\n                                        },\n                                        shadowOpacity: 0.15,\n                                        shadowRadius: 10,\n                                    },\n                                ]}\n                            >\n                                <Palette />\n                            </View>\n\n                        </View>\n                    </View>\n\n                </View>\n\n\n\n\n            </View>\n            <View style={{ flexDirection: 'row', flexWrap: 'wrap', alignSelf: 'center', justifyContent: 'center' }}>\n                <View style={{ flexDirection: 'column', width: '84vw', margin: 2 }}>\n                    <View style={{ flexDirection: 'row', flexWrap: 'wrap', alignSelf: 'center', justifyContent: 'center' }}>\n                        {data.map((item) => (\n                            <View\n                                key={item}\n                                style={[\n                                    styles.square,\n                                    {\n                                        shadowOffset: {\n                                            width: 10,\n                                            height: 10,\n                                        },\n                                        shadowOpacity: 0.15,\n                                        shadowRadius: 10,\n                                    },\n                                ]}\n                            >\n                                {item.data}\n                            </View>\n                        ))}\n\n                    </View>\n                </View>\n            </View>\n        </>\n\n    );\n};\n\nconst styles = StyleSheet.create({\n    button: {\n        padding: 10,\n        borderRadius: 5,\n    },\n    hoveredButton: {\n        marginBottom: '10px',\n        alignSelf: 'center',\n        flexDirection: 'column',\n        backgroundColor: 'rgba(255, 255, 255, 0.1)',\n        width: '300px'\n    },\n    normalButton: {\n        marginBottom: '10px',\n        alignSelf: 'center',\n        flexDirection: 'column',\n    },\n    buttonText: {\n        color: '#000',\n        fontSize: 18,\n    },\n    primarySquare: {\n        backgroundColor: 'rgba(255, 255, 255, 0.05)',\n        width: '350px',\n        // height: '13rem',  \n        margin: '0.75rem',\n        borderRadius: '1rem'\n    },\n    square: {\n        backgroundColor: 'rgba(255, 255, 255, 0.05)',\n        width: '80vw',\n        // height: '13rem',\n        margin: '0.75rem',\n        borderRadius: '1rem'\n    },\n    paragraph: {\n        marginVertical: 8,\n        color: 'white', fontFamily: 'Inter_900Black', fontSize: '2vh',\n        width: '78vw',\n        padding: '0.25rem'\n      },\n});\n\n\n\n\n\n","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image, Color } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './utils/GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\nimport { Palette } from './Palette';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const Blog = () => {\n    return (\n        <View style={{flexDirection: 'column', flexWrap: 'wrap'}}>\n            <View style={{alignSelf: 'center'}}>\n                <Text style={{...styles.paragraph, color: '#00b4d8'}}>\n                RGBA (Red Green Blue Alpha) \n                </Text>\n                <Text style={styles.paragraph}>\n                    RGBA stands for Red Green Blue Alpha, which is a color model used in digital design and programming to \n                    specify colors with an added alpha channel for transparency. Like the RGB model, RGBA uses a combination \n                    of letters and numbers to represent specific colors, but with the added alpha channel, RGBA codes consist \n                    of four values instead of three. The alpha channel represents the level of transparency, with 0 being \n                    fully transparent and 1 being fully opaque.\n                </Text>\n                <Text style={styles.paragraph}>\n                    For example, the RGBA code for red with 50% transparency would be \"rgba(255,0,0,0.5)\". In this case, the \n                    red value is 255 (fully intense), the green and blue values are 0 (no intensity), and the alpha value is 0.5 (50% transparency).\n                </Text>\n                <Text style={styles.paragraph}>\n                    One key difference between RGBA and RGB is the inclusion of the alpha channel in RGBA, which allows for the specification of \n                    transparent colors. This can be useful for creating layered or blended effects in digital design. RGB, on the other hand, does \n                    not have an alpha channel and is limited to solid, opaque colors.\n                </Text>\n                <View style={{borderBottomColor: 'white', borderBottomWidth: 4, marginTop: '1rem', marginBottom: '1rem'}}></View>\n            </View>\n\n\n            <View style={{alignSelf: 'center'}}>\n                <Text style={{...styles.paragraph, color: '#00b4d8'}}>\n                Hexidecimal \n                </Text>\n                <Text style={styles.paragraph}>\n                    Hex color codes are a widely used method in digital design and programming to specify colors \n                    for web pages, graphics, and user interfaces. These codes consist of a six-digit combination of \n                    letters and numbers that represent a specific color using the RGB (red, green, blue) color model. \n                    Each color is represented by a two-digit hexadecimal number, with 00 being the lowest intensity \n                    and FF being the highest intensity. For example, the hex color code for red is \"#FF0000\", green \n                    is \"#00FF00\", and blue is \"#0000FF\". In addition to these primary colors, hex color codes can be \n                    combined to create a wide range of colors, such as \"#FFFFFF\" for white, \"#000000\" for black, and \n                    \"#9ACD32\" for yellow.\n                </Text>\n                <View style={{borderBottomColor: 'white', borderBottomWidth: 4, marginTop: '1rem', marginBottom: '1rem'}}></View>\n            </View>\n            \n            <View style={{alignSelf: 'center'}}>\n                <Text style={{...styles.paragraph, color: '#00b4d8'}}>\n                    Complementary Colors\n                </Text>\n                <Text style={styles.paragraph}>\n                    Certain colors and hues can work well together and appear to be complementary \n                    because of the way that the colors are arranged on the color wheel. The color \n                    wheel is a visual representation of the colors of the visible spectrum arranged in a circle.\n                </Text>\n                <Text style={styles.paragraph}>\n                    There are a few different ways that colors can be arranged on the color wheel, but one common \n                    way is to arrange the primary colors (red, yellow, and blue) around the wheel, with the secondary \n                    colors (orange, green, and purple) between the primary colors. The tertiary colors \n                    (yellow-green, blue-green, blue-purple, red-purple, red-orange, and yellow-orange) are \n                    located between the primary and secondary colors on the wheel.\n                </Text>\n                <Text style={styles.paragraph}>\n                    Colors that are located opposite each other on the color wheel are known as complementary colors. \n                    These colors tend to work well together because they are highly contrasting, which can create a \n                    visually appealing balance. For example, red and green are complementary colors, as are blue and orange.\n                </Text>\n                <Text style={styles.paragraph}>\n                    There are several theories about why certain color combinations are pleasing to the eye, and some of \n                    these theories involve mathematical principles such as the golden ratio. However, the exact reasons \n                    for why certain color combinations are perceived as being harmonious or complementary are still not \n                    fully understood and are the subject of ongoing research in fields such as psychology and neuroscience.\n                </Text>\n                <View style={{borderBottomColor: 'white', borderBottomWidth: 4, marginTop: '1rem'}}></View>\n\n            {/* <View style={{ backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '20rem', width: '20rem', borderRadius: '1rem' }}>\n                <Text style={{ color: 'white', alignSelf: 'center', marginTop: '2rem', fontSize: '1.5rem', fontWeight: 'bold', fontFamily: 'Inter_900Black', width: '18rem', }}>Complementary Colors</Text>\n            </View> */}\n\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    button: {\n        padding: 10,\n        borderRadius: 5,\n    },\n    hoveredButton: {\n        backgroundColor: 'rgba(255, 255, 255, 0.75)',\n        marginBottom: HeightRatio(20),\n        width: '22rem',\n        alignSelf: 'center'\n    },\n    normalButton: {\n        backgroundColor: '#fff',\n        marginBottom: HeightRatio(20),\n        width: '22rem',\n        alignSelf: 'center'\n    },\n    buttonText: {\n        color: '#000',\n        fontSize: 18,\n    },\n    paragraph: {\n        marginVertical: 8,\n        color: 'white', fontFamily: 'Inter_900Black', fontSize: '2vh',\n        width: '80vw'\n      },\n});\n\n\n\n\n\n","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image, Color } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './utils/GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const Layout = () => {\n    return (\n        <>\n            <View style={{alignSelf: 'center'}}>\n                <Text style={{\n                    color: 'white',\n                    fontFamily: 'Inter_900Black',\n                    fontSize: '4vh',\n                }}> Test</Text>\n            </View>\n\n        </>\n    )\n}","import React from 'react';\nimport { StyleSheet, Text, View, Dimensions, PixelRatio, Image, SafeAreaView, ScrollView, StatusBar, Platform, TouchableOpacity, RefreshControl } from 'react-native';\nimport { Convert } from './Convert'\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Blog } from './Blog';\nimport { Layout } from './Layout';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n  width: SCREEN_WIDTH,\n  height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n  const newSize = size * scaleWidth;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n  const newSize = size * scaleHeight;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst wait = (timeout) => {\n  return new Promise(resolve => setTimeout(resolve, timeout));\n}\n\nfunction HomeScreen({ navigation }) {\n  const [refreshing, setRefreshing] = React.useState(false);\n\n  const onRefresh = React.useCallback(() => {\n    setRefreshing(true);\n    wait(2000).then(() => setRefreshing(false));\n  }, []);\n\n\n  return (\n    <LinearGradient\n        colors={['#1b262c', '#070707']}\n        style={{ opacity: 1, width: '100%', alignSelf: 'center'}}\n      start={[0.0, 0.0]} end={[0.75, 0.5]}\n      >\n        <View >\n\n          <View style={{ height: '4rem', borderBottomWidth: 1, borderBottomColor: '#80ffdb', width: '50vw', alignSelf: 'center' }}>\n            <Text style={{ color: 'white', alignSelf: 'center', marginTop: '0.8rem', fontSize: '2rem', fontWeight: 'bold', fontFamily: 'Inter_900Black', }}>HEX to RGBA Pro</Text>\n          </View>\n          {/* <View style={{alignSelf: 'center', }}>\n            <TouchableOpacity onPress={() => navigation.navigate('Blog')} style={{backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '3rem', marginTop: '1rem', borderRadius: '1rem'}}>\n              <Text style={{color: 'white', fontSize: 20, margin: '1rem', fontSize: '1.8vh', fontFamily: 'Inter_900Black'}}>INFO</Text>\n            </TouchableOpacity>\n          </View> */}\n\n          <View style={{}}>\n            {/* <SafeAreaView style={styles.container}>\n              <ScrollView \n                style={{}}\n                refreshControl={\n                  <RefreshControl\n                    refreshing={refreshing}\n                    onRefresh={onRefresh}\n                    enabled={true}\n                  />\n                } \n              > */}\n              <Convert />\n              {/* <Layout /> */}\n              {/* </ScrollView>\n            </SafeAreaView> */}\n            {/* <StatusBar style=\"auto\" /> */}\n          </View>\n\n          <View style={{ height: '100rem' }} />\n\n        </View>\n      </LinearGradient>\n  );\n}\n\n\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen \n            name=\"Home\" \n            component={HomeScreen}\n            options={{\n              animationEnabled: false,\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    // backgroundColor: '#181818',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '6vh'\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/favicon.603fe8ad.png\";"],"sourceRoot":""}