{"version":3,"sources":["assets/x.png","utils/GetColorGradient.js","utils/ConvertTool.js","Styling.js","utils/HarmoniousPalette.js","utils/RandomPalette.js","utils/RandomPaletteArray.js","Index.js","App.js","assets/cycle.png"],"names":["module","exports","GetColorGradient","color","chroma","scale","brighten","darken","colors","Dimensions","get","width","height","ConvertTool","useState","value","setValue","result","setResult","gradient","setGradient","isHovered","setIsHovered","setIsGradientHovered","React","copiedText","setCopiedText","gradientCopiedText","setGradientCopiedText","useFonts","Inter_900Black","copyToClipboard","Clipboard","fetchCopiedText","text","copyGradientToClipboard","input","fetchGradientCopiedText","View","style","styles","primarySquare","shadowOffset","shadowOpacity","shadowRadius","marginLeft","marginRight","marginTop","Text","fontFamily","fontSize","alignSelf","TouchableOpacity","onPress","borderRadius","position","zIndex","backgroundColor","top","left","Image","source","require","flexDirection","margin","TextInput","onChangeText","placeholder","outline","display","justifyContent","padding","border","borderColor","borderWidth","borderBottomWidth","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","startsWith","a","match","map","x","parseInt","a0","r","slice","g","b","undefined","parseFloat","toFixed","parts","toString","padStart","handleConvert","borderTopWidth","marginBottom","activeOpacity","button","hoveredButton","normalButton","onMouseEnter","onMouseLeave","flexWrap","c","i","StyleSheet","create","buttonText","square","paragraph","marginVertical","SCREEN_WIDTH","SCREEN_HEIGHT","scaleWidth","scaleHeight","WidthRatio","size","newSize","Math","round","PixelRatio","roundToNearestPixel","HeightRatio","Styling","container","alignItems","content_container","heading_0","fontWeight","textAlign","division_line","borderBottomColor","accent_color","HarmoniousPalette","inputColor","setInputColor","palette","setPalette","newPalette","substring","phi","sqrt","color1","color2","color3","color4","color5","padHex","hex","length","newHex","generateGoldenRatioPalette","console","log","RandomPalette","copiedCode","setCopiedCode","hslToRgb","h","s","l","hue2rgb","p","q","t","hslToHex","abs","m","hexToHsl","exec","max","min","d","copyColorCode","fetchCopyColorCode","Array","from","floor","random","paletteColors","concat","sort","localeCompare","baseColor","baseHue","baseSaturation","baseLightness","hue","saturation","lightness","_","newLightness","generatePalette","index","RandomPaletteArray","palettes","setPalettes","previous","useEffect","num","paletteBox","flex","Index","accessibilityLabel","HomeScreen","navigation","setRefreshing","useCallback","timeout","Promise","resolve","setTimeout","then","LinearGradient","opacity","start","end","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","name","component","options","animationEnabled","headerShown"],"mappings":"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","file":"static/js/app.4576e035.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.bc64bca0.png\";","import chroma from 'chroma-js';\n\nexport const GetColorGradient = (color) => {\n  const scale = chroma.scale([chroma(color).brighten(2), color, chroma(color).darken(2)]);\n  return scale.colors(10);\n};","import React, { useEffect, useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image, Color } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const ConvertTool = () => {\n    const [value, setValue] = useState('')\n    const [result, setResult] = useState('');\n    const [color, setColor] = useState('');\n    const [gradient, setGradient] = useState([]);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n    const [copiedText, setCopiedText] = React.useState('');\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n\n    let [fontsLoaded] = useFonts({ Inter_900Black, });\n    if (!fontsLoaded) { return null; }\n\n    // Primary Color\n    const copyToClipboard = async () => {\n        await Clipboard.setStringAsync(result);\n        // console.log(\"copyToClipboard\")\n        fetchCopiedText();\n    };\n\n    const fetchCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setCopiedText(text);\n    };\n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        // console.log(\"copyToClipboard\")\n        fetchGradientCopiedText();\n    };\n\n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n    const handleConvert = () => {\n        setCopiedText('')\n        if (value.startsWith('#')) {\n            const [r0, g0, b0, a0] = value.match(/\\w\\w/g).map(x => parseInt(x, 16));\n            let a;\n            // Convert HEX to RGBA\n            const r = parseInt(value.slice(1, 3), 16);\n            const g = parseInt(value.slice(3, 5), 16);\n            const b = parseInt(value.slice(5, 7), 16);\n            if (a0 != undefined) {\n                a = a0;\n            } else {\n                a = 255;\n            }\n             // Assume full opacity\n            setResult(`rgba(${r}, ${g}, ${b}, ${parseFloat(a/255).toFixed(2)})`);\n            setGradient(GetColorGradient(`rgba(${r}, ${g}, ${b}, ${parseFloat(a/255).toFixed(2)})`))\n        } else if (value.startsWith('rgba')) {\n            setGradient(GetColorGradient(value))\n            // Convert RGBA to HEX\n            const parts = value.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b = parseInt(parts[3]).toString(16).padStart(2, '0');\n            setResult(`#${r}${g}${b}`);\n        } else if (value.startsWith('rgb')) {\n            setGradient(GetColorGradient(value))\n            // Convert RGBA to HEX\n            const parts = value.match(/^rgb?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b = parseInt(parts[3]).toString(16).padStart(2, '0');\n            setResult(`#${r}${g}${b}`);\n        }\n    };\n\n    return (\n\n        <View\n\n            style={[\n                styles.primarySquare,\n                {\n                    shadowOffset: {\n                        width: 10,\n                        height: 10,\n                    },\n                    shadowOpacity: 0.15,\n                    shadowRadius: 10,\n                },\n            ]}\n        >\n            <View style={{ marginLeft: '3rem', marginRight: '3rem', marginTop: '1rem' }}>\n                <Text style={{\n                    fontFamily: 'Inter_900Black',\n                    fontSize: '20px',\n                    alignSelf: 'center',\n                    color: 'white'\n                }}>Convert</Text>\n                <Text style={{\n                    fontFamily: 'Inter_900Black',\n                    fontSize: '12px',\n                    alignSelf: 'center',\n                    color: 'white'\n                }}>(HEX, RGB, RGBA)</Text>\n\n                <View style={{}}>\n                    {value &&\n                        <TouchableOpacity\n                            onPress={() => {\n                                setValue('');\n                                setResult('');\n                                setGradient([]);\n                                setGradientCopiedText('');\n                            }}\n                            style={{\n                                height: '4vh',\n                                width: '4vh',\n                                borderRadius: 10,\n                                position: 'absolute',\n                                zIndex: 10,\n                                backgroundColor: '#ff1654',\n                                top: '1vh',\n                                left: '-5vh'\n                            }}>\n                            <Image\n                                source={require('../assets/x.png')}\n                                style={{ height: 15, width: 15, alignSelf: 'center', marginTop: '1.3vh', marginLeft: '0.1vh' }}\n                            />\n                        </TouchableOpacity>\n                    }\n                    <View style={{ flexDirection: 'column', alignSelf: 'center', margin: 10 }}>\n                        <TextInput\n                            value={value}\n                            onChangeText={setValue}\n                            placeholder=\"Enter HEX, RGB, or RGBA... \"\n                            style={{\n                                outline: 'none',\n                                backgroundColor: 'transparent',\n                                color: 'white',\n                                display: 'flex',\n                                justifyContent: 'flex-start',\n                                padding: 30,\n                                border: 'solid',\n                                borderColor: 'white',\n                                borderWidth: 4,\n                                borderBottomWidth: 2,\n                                borderTopLeftRadius: 30,\n                                borderBottomLeftRadius: 0,\n                                borderTopRightRadius: 30,\n                                borderBottomRightRadius: 0,\n                                alignSelf: 'center',\n                                marginTop: 10,\n                                // marginBottom: 4,\n                                width: '20rem',\n                                fontSize: '18px',\n                                fontFamily: 'Inter_900Black'\n                            }}\n                        />\n                        <TouchableOpacity\n                            onPress={() => handleConvert()}\n                            style={{\n                                backgroundColor: '#ff1654',\n                                padding: '10px',\n                                border: 'solid',\n                                borderColor: 'white',\n                                borderWidth: 4,\n                                borderTopWidth: 2,\n                                borderTopLeftRadius: 0,\n                                borderBottomLeftRadius: 30,\n                                borderTopRightRadius: 0,\n                                borderBottomRightRadius: 30,\n                                // marginTop: 10,\n                                marginBottom: 4,\n                                width: '20rem'\n                            }}\n                        >\n                            <Text style={{\n                                color: 'white',\n                                marginTop: '0.5vh',\n                                fontSize: '18px',\n                                fontFamily: 'Inter_900Black',\n                                alignSelf: 'center'\n                            }}>Swap!</Text>\n                        </TouchableOpacity>\n                    </View>\n                    {result &&\n                        <>\n                            <TouchableOpacity\n                                onPress={copyToClipboard}\n                                activeOpacity={1}\n                                style={[\n                                    styles.button,\n                                    isHovered ? styles.hoveredButton : styles.normalButton\n                                ]}\n                                onMouseEnter={() => setIsHovered(true)}\n                                onMouseLeave={() => setIsHovered(false)}\n                            >\n\n                                <Text style={{\n                                    color: 'white',\n                                    fontSize: 18,\n                                    fontFamily: 'Inter_900Black',\n                                    alignSelf: 'center',\n                                    marginBottom: '1rem'\n                                    // width: '200px'\n                                    // margin: '1rem'\n                                }}>{result}</Text>\n\n                                {copiedText != '' &&\n                                    <Text style={{\n                                        color: 'white',\n                                        fontSize: 20,\n                                        margin: '0.5rem',\n                                        fontFamily: 'Inter_900Black',\n                                        alignSelf: 'center'\n                                    }}>Copied!</Text>\n                                }\n\n                                <View style={{\n                                    width: '100px',\n                                    alignSelf: 'center',\n                                    height: '100px',\n                                    borderRadius: 6,\n                                    borderWidth: 1,\n                                    borderColor: 'rgba(100, 100, 100, 0.25)',\n                                    backgroundColor: `${result}`\n                                }}></View>\n\n                            </TouchableOpacity>\n\n                        </>\n                    }\n\n                </View>\n\n\n                <View style={{ flexDirection: 'row', flexWrap: 'wrap', width: '22rem', alignSelf: 'center', justifyContent: 'center' }}>\n                    {gradient.map((c, i) => (\n                        <>\n                            <TouchableOpacity\n                                onPress={() => copyGradientToClipboard(c)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                                onMouseEnter={() => setIsGradientHovered(true)}\n                                onMouseLeave={() => setIsGradientHovered(false)}\n                                key={i}\n                            >\n                                <View key={i} style={{\n                                    backgroundColor: c,\n                                    height: 50,\n                                    width: 75,\n                                    borderWidth: 1,\n                                    borderRadius: 6,\n                                    borderColor: 'rgba(100, 100, 100, 0.25)',\n                                }}></View>\n                            </TouchableOpacity>\n                        </>\n                    ))}\n                </View>\n                <View style={{ alignSelf: 'center', flexDirection: 'column', margin: '1rem' }}>\n                    <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '2.2rem' }}>{gradientCopiedText}</Text>\n                    {gradientCopiedText != '' &&\n                        <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '1rem', alignSelf: 'center' }}>Copied!</Text>\n                    }\n                </View>\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    button: {\n        padding: 10,\n        borderRadius: 5,\n    },\n    hoveredButton: {\n        marginBottom: '10px',\n        alignSelf: 'center',\n        flexDirection: 'column',\n        backgroundColor: 'rgba(255, 255, 255, 0.1)',\n        width: '300px'\n    },\n    normalButton: {\n        marginBottom: '10px',\n        alignSelf: 'center',\n        flexDirection: 'column',\n    },\n    buttonText: {\n        color: '#000',\n        fontSize: 18,\n    },\n    primarySquare: {\n        backgroundColor: 'rgba(255, 255, 255, 0.05)',\n        width: '350px',\n        // height: '13rem',  \n        margin: '0.75rem',\n        borderRadius: '1rem'\n    },\n    square: {\n        backgroundColor: 'rgba(255, 255, 255, 0.05)',\n        width: '80vw',\n        // height: '13rem',\n        margin: '0.75rem',\n        borderRadius: '1rem'\n    },\n    paragraph: {\n        marginVertical: 8,\n        color: 'white', fontFamily: 'Inter_900Black', fontSize: '2vh',\n        width: '78vw',\n        padding: '0.25rem'\n    },\n});","import { StyleSheet, Dimensions, StatusBar, PixelRatio } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\n\nexport const windowWidth = Dimensions.get('window').width;\nexport const windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n  } = Dimensions.get('window');\n  \n  const scaleWidth = SCREEN_WIDTH / 360;\n  const scaleHeight = SCREEN_HEIGHT / 800;\n\nexport const WidthRatio = (size) => {\n  const newSize = size * scaleWidth;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const HeightRatio = (size) => {\n  const newSize = size * scaleHeight;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const Styling = StyleSheet.create({\n    container: {\n      // flex: 1,\n      // backgroundColor: '#181818',\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginTop: '6vh'\n    },\n    content_container: {\n      flexDirection: 'row', \n      flexWrap: 'wrap', \n      alignSelf: 'center', \n      justifyContent: 'center'\n    },\n    heading_0: {\n        color: 'white', \n        alignSelf: 'center', \n        marginTop: '0.8rem', \n        fontSize: HeightRatio(38), \n        fontWeight: 'bold', \n        fontFamily: 'Inter_900Black',\n        textAlign: 'center'\n    },\n    division_line: {\n        borderBottomWidth: 1, \n        borderBottomColor: '#80ffdb', \n        width: '60vw', \n        alignSelf: 'center',\n        margin: 10\n    },\n    accent_color: {\n        color: '#ff9f1c'\n    },\n    primarySquare: {\n      backgroundColor: 'rgba(255, 255, 255, 0.05)',\n      width: '350px',\n      // height: '13rem',  \n      margin: '0.75rem',\n      borderRadius: '1rem'\n  },\n  });","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image } from 'react-native';\nimport color from 'color';\nimport * as Clipboard from 'expo-clipboard';\nimport { Styling } from '../Styling';\n\nexport const HarmoniousPalette = () => {\n    const [inputColor, setInputColor] = useState('');\n    const [palette, setPalette] = useState([]);\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n\n\n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        // console.log(\"copyToClipboard\")\n        fetchGradientCopiedText();\n    };\n\n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n\n\n\n    function generateGoldenRatioPalette(inputColor) {\n\n        if (inputColor.startsWith('#')) {\n            const [r0, g0, b0, a0] = inputColor.match(/\\w\\w/g).map(x => parseInt(x, 16));\n            let a;\n            // Convert HEX to RGBA\n            const r = parseInt(inputColor.substring(1, 3), 16);\n            const g = parseInt(inputColor.substring(3, 5), 16);\n            const b = parseInt(inputColor.substring(5, 7), 16);\n            if (a0 != undefined) {\n                a = a0;\n            } else {\n                a = 255;\n            }\n\n            // Calculate the golden ratio\n            const phi = (1 + Math.sqrt(5)) / 2;\n\n            // Generate 5 colors based on the golden ratio\n            const color1 = `#${inputColor.substring(1, 7)}`;\n            const color2 = `#${Math.round(r * phi).toString(16)}${Math.round(g * phi).toString(16)}${Math.round(b * phi).toString(16)}`;\n            const color3 = `#${Math.round(r / phi).toString(16)}${Math.round(g / phi).toString(16)}${Math.round(b / phi).toString(16)}`;\n            const color4 = `#${Math.round(r * phi).toString(16)}${Math.round(g / phi).toString(16)}${Math.round(b * phi).toString(16)}`;\n            const color5 = `#${Math.round(r / phi).toString(16)}${Math.round(g * phi).toString(16)}${Math.round(b / phi).toString(16)}`;\n\n            function padHex(hex) {\n                // Check if the HEX value is less than six characters long\n                if (hex.length < 7) {\n                    // Pad the HEX value with leading zeros\n                    return `#${hex.substring(1, 7).padStart(6, '0')}`;\n                }\n                // Check if the HEX value is longer than six characters\n                else if (hex.length > 7) {\n                    // Trim the HEX value to six characters\n                    return `#${hex.substring(1, 7)}`;\n                }\n                // Otherwise, return the HEX value as-is\n                return hex;\n            }\n\n\n            // Check the length of each color and pad with leading zeros if necessary\n            const paddedColor1 = padHex(color1);\n            const paddedColor2 = padHex(color2);\n            const paddedColor3 = padHex(color3);\n            const paddedColor4 = padHex(color4);\n            const paddedColor5 = padHex(color5);\n\n            // Return the array of padded colors\n            return [paddedColor1, paddedColor2, paddedColor3, paddedColor4, paddedColor5];\n\n        } else if (inputColor.startsWith('rgba')) {\n            // Convert RGBA to HEX\n            const parts = inputColor.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r0 = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g0 = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b0 = parseInt(parts[3]).toString(16).padStart(2, '0');\n            const newHex = `#${r0}${g0}${b0}`;\n\n            const r = parseInt(newHex.substring(1, 3), 16);\n            const g = parseInt(newHex.substring(3, 5), 16);\n            const b = parseInt(newHex.substring(5, 7), 16);\n            const a = 1; // Assume full opacity\n\n            // Calculate the golden ratio\n            const phi = (1 + Math.sqrt(5)) / 2;\n\n            // Generate 5 colors based on the golden ratio\n            const color1 = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n            const color2 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color3 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b / phi).toString(16).padStart(2, '0')}`;\n            const color4 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color5 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n\n            function padHex(hex) {\n                // Check if the HEX value is less than six characters long\n                if (hex.length < 7) {\n                    // Pad the HEX value with leading zeros\n                    return `#${hex.substring(1, 7).padStart(6, '0')}`;\n                }\n                // Check if the HEX value is longer than six characters\n                else if (hex.length > 7) {\n                    // Trim the HEX value to six characters\n                    return `#${hex.substring(1, 7)}`;\n                }\n                // Otherwise, return the HEX value as-is\n                return hex;\n            }\n\n\n            // Check the length of each color and pad with leading zeros if necessary\n            const paddedColor1 = padHex(color1);\n            const paddedColor2 = padHex(color2);\n            const paddedColor3 = padHex(color3);\n            const paddedColor4 = padHex(color4);\n            const paddedColor5 = padHex(color5);\n\n            // Return the array of padded colors\n            return [paddedColor1, paddedColor2, paddedColor3, paddedColor4, paddedColor5];\n        } else if (inputColor.startsWith('rgb')) {\n            // Convert RGBA to HEX\n            const parts = inputColor.match(/^rgb?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r0 = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g0 = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b0 = parseInt(parts[3]).toString(16).padStart(2, '0');\n            const newHex = `#${r0}${g0}${b0}`;\n\n            const r = parseInt(newHex.substring(1, 3), 16);\n            const g = parseInt(newHex.substring(3, 5), 16);\n            const b = parseInt(newHex.substring(5, 7), 16);\n            const a = 1; // Assume full opacity\n\n            // Calculate the golden ratio\n            const phi = (1 + Math.sqrt(5)) / 2;\n\n            // Generate 5 colors based on the golden ratio\n            const color1 = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n            const color2 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color3 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b / phi).toString(16).padStart(2, '0')}`;\n            const color4 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color5 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n\n            function padHex(hex) {\n                // Check if the HEX value is less than six characters long\n                if (hex.length < 7) {\n                    // Pad the HEX value with leading zeros\n                    return `#${hex.substring(1, 7).padStart(6, '0')}`;\n                }\n                // Check if the HEX value is longer than six characters\n                else if (hex.length > 7) {\n                    // Trim the HEX value to six characters\n                    return `#${hex.substring(1, 7)}`;\n                }\n                // Otherwise, return the HEX value as-is\n                return hex;\n            }\n\n\n            // Check the length of each color and pad with leading zeros if necessary\n            const paddedColor1 = padHex(color1);\n            const paddedColor2 = padHex(color2);\n            const paddedColor3 = padHex(color3);\n            const paddedColor4 = padHex(color4);\n            const paddedColor5 = padHex(color5);\n\n            // Return the array of padded colors\n            return [paddedColor1, paddedColor2, paddedColor3, paddedColor4, paddedColor5];\n        }\n    }\n\n    function handleGeneratePalette() {\n        if (inputColor.startsWith('#') || inputColor.startsWith('rgba') || inputColor.startsWith('rgb')) {\n            const newPalette = generateGoldenRatioPalette(inputColor);\n            setPalette(newPalette);\n        } else {\n            console.log(\"ERROR\")\n        }\n    }\n\n    return (\n        <View\n            style={[\n                Styling.primarySquare,\n                {\n                    shadowOffset: {\n                        width: 10,\n                        height: 10,\n                    },\n                    shadowOpacity: 0.15,\n                    shadowRadius: 10,\n                },\n            ]}\n        >\n            <View style={{ marginLeft: '3rem', marginRight: '3rem', marginTop: '1rem' }}>\n                <Text style={{\n                    fontFamily: 'Inter_900Black',\n                    fontSize: '20px',\n                    alignSelf: 'center',\n                    color: 'white'\n                }}>Harmonious Palette</Text>\n                <Text style={{\n                    fontFamily: 'Inter_900Black',\n                    fontSize: '12px',\n                    alignSelf: 'center',\n                    color: 'white'\n                }}>(HEX, RGB, RGBA)</Text>\n\n                <View style={{}}>\n                    {inputColor &&\n                        <TouchableOpacity\n                            onPress={() => {\n                                setInputColor('');\n                                setInputColor('');\n                                setPalette([]);\n                                setGradientCopiedText('');\n                            }}\n                            style={{\n                                height: '4vh',\n                                width: '4vh',\n                                borderRadius: 10,\n                                position: 'absolute',\n                                zIndex: 10,\n                                backgroundColor: '#ff1654',\n                                top: '1vh',\n                                left: '-5vh'\n                            }}>\n                            <Image\n                                source={require('../assets/x.png')}\n                                style={{ height: 15, width: 15, alignSelf: 'center', marginTop: '1.3vh', marginLeft: '0.1vh' }}\n                            />\n                        </TouchableOpacity>\n                    }\n                    <View style={{ flexDirection: 'column', alignSelf: 'center', margin: 10 }}>\n\n                        <TextInput\n                            value={inputColor}\n                            onChangeText={text => setInputColor(text)}\n                            placeholder=\"Enter HEX, RGB, RGBA...\"\n                            style={{\n                                outline: 'none',\n                                backgroundColor: 'transparent',\n                                color: 'white',\n                                display: 'flex',\n                                justifyContent: 'flex-start',\n                                padding: 30,\n                                border: 'solid',\n                                borderColor: 'white',\n                                borderWidth: 4,\n                                borderBottomWidth: 2,\n                                borderTopLeftRadius: 30,\n                                borderBottomLeftRadius: 0,\n                                borderTopRightRadius: 30,\n                                borderBottomRightRadius: 0,\n                                alignSelf: 'center',\n                                marginTop: 10,\n                                // marginBottom: 4,\n                                width: '20rem',\n                                fontSize: '18px',\n                                fontFamily: 'Inter_900Black'\n                            }}\n                        />\n                        <TouchableOpacity\n                            onPress={handleGeneratePalette}\n                            style={{\n                                backgroundColor: '#ff1654',\n                                padding: '10px',\n                                border: 'solid',\n                                borderColor: 'white',\n                                borderWidth: 4,\n                                borderTopWidth: 2,\n                                borderTopLeftRadius: 0,\n                                borderBottomLeftRadius: 30,\n                                borderTopRightRadius: 0,\n                                borderBottomRightRadius: 30,\n                                // marginTop: 10,\n                                marginBottom: 4,\n                                width: '20rem'\n                            }}\n                        >\n                            <Text style={{\n                                color: 'white',\n                                marginTop: '0.5vh',\n                                fontSize: '20px',\n                                fontFamily: 'Inter_900Black',\n                                alignSelf: 'center'\n                            }}>Generate!</Text>\n                        </TouchableOpacity>\n                    </View>\n                    {/* <Button onPress={() => console.log(\"Generate\")} title=\"Generate Palette\" /> */}\n                    {/* {palette.map(color => (\n                <View style={{ backgroundColor: color, height: 50, width: 50 }} />\n            ))} */}\n\n\n\n                    <View style={{ flexDirection: 'row', flexWrap: 'wrap', width: '22rem', alignSelf: 'center', justifyContent: 'center' }}>\n                        {palette.map((color) => (\n                            <>\n                                <TouchableOpacity\n                                    onPress={() => copyGradientToClipboard(color)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                                    onMouseEnter={() => setIsGradientHovered(true)}\n                                    onMouseLeave={() => setIsGradientHovered(false)}\n                                    key={color}\n                                >\n                                    <View key={color} style={{\n                                        backgroundColor: color,\n                                        height: 50,\n                                        width: 75,\n                                        borderWidth: 1,\n                                        borderRadius: 6,\n                                        borderColor: 'rgba(100, 100, 100, 0.25)',\n                                    }}></View>\n                                </TouchableOpacity>\n                            </>\n                        ))}\n                    </View>\n                    <View style={{ alignSelf: 'center', flexDirection: 'column', margin: '1rem' }}>\n                        <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '2.2rem' }}>{gradientCopiedText}</Text>\n                        {gradientCopiedText != '' &&\n                            <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '1rem', alignSelf: 'center' }}>Copied!</Text>\n                        }\n                    </View>\n                </View>\n            </View>\n        </View>\n    );\n}\n","import React, { useState } from 'react';\nimport { View, Text, Button, StyleSheet, TouchableOpacity } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\nimport { Styling } from '../Styling';\n\nexport const RandomPalette = () => {\n    const [palette, setPalette] = useState([]);\n    const [copiedCode, setCopiedCode] = useState('');\n\n    const generatePalette = () => {\n        const hexValues = Array.from({ length: 20 }).map(() => {\n            // Generate a random number between 0 and 16777215 (16777215 is equal to FFFFFF in hexadecimal)\n            const randomNumber = Math.floor(Math.random() * 16777216);\n            // Convert the number to a HEX value and return it\n            return '#' + randomNumber.toString(16).padStart(6, '0');\n        });\n        // Trending colors\n        // const colors = ['#F44336', '#9C27B0', '#3F51B5', '#2196F3', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#FFC107', '#FF9800'];\n        let colors = hexValues;\n\n        // Styles\n        const styles = ['warm', 'cold', 'bright', 'dark', 'pastel', 'vintage', 'triadic', 'complementary', 'gradient'];\n\n        // Generate random colors based on style\n        const style = styles[Math.floor(Math.random() * styles.length)];\n        let paletteColors = [];\n        if (style === 'warm') {\n            paletteColors = colors.slice(0, 5);\n        } else if (style === 'cold') {\n            paletteColors = colors.slice(5, 10);\n        } else if (style === 'bright') {\n            paletteColors = colors.slice(0, 5).concat(colors.slice(5, 10)).sort(() => Math.random() - 0.5);\n        } else if (style === 'dark') {\n            paletteColors = colors.slice(0, 5).concat(colors.slice(5, 10)).sort((a, b) => b.localeCompare(a));\n        } else if (style === 'pastel') {\n            paletteColors = colors.map(color => {\n                // Convert HEX to RGB\n                const [r, g, b] = color.match(/\\w\\w/g).map(x => parseInt(x, 16));\n                // Return pastel version of color as HEX\n                return `#${(((r * 0.7) << 16) | ((g * 0.7) << 8) | (b * 0.7)).toString(16).padStart(6, '0')}`;\n            });\n        } else if (style === 'vintage') {\n            const vintageColors = ['#722f37', '#b69a90', '#d2b6a2', '#e9d4c5', '#eeded3'];\n            paletteColors = vintageColors.sort(() => Math.random() - 0.5);\n        } else if (style === 'triadic') {\n            // Select a random color from the `colors` array\n            const baseColor = colors[Math.floor(Math.random() * colors.length)];\n            // Convert the base color to HSL\n            const [baseHue, baseSaturation, baseLightness] = hexToHsl(baseColor);\n            // Generate the two additional colors by adding or subtracting 120 from the base hue\n            const color1 = hslToHex((baseHue + 120) % 360, baseSaturation, baseLightness);\n            const color2 = hslToHex((baseHue + 240) % 360, baseSaturation, baseLightness);\n            paletteColors = [baseColor, color1, color2];\n        } else if (style === 'complementary') {\n            // Select a random color from the `colors` array\n            const baseColor = colors[Math.floor(Math.random() * colors.length)];\n            // Convert the base color to HSL\n            const [baseHue, baseSaturation, baseLightness] = hexToHsl(baseColor);\n            // Generate the additional color by adding or subtracting 180 from the base hue\n            const color1 = hslToHex((baseHue + 180) % 360, baseSaturation, baseLightness);\n            paletteColors = [baseColor, color1];\n        } else if (style === 'monochromatic') {\n            // Pick a random color from the array\n            const baseColor = colors[Math.floor(Math.random() * colors.length)];\n            // Convert the base color to HSL\n            const [hue, saturation, lightness] = hexToHsl(baseColor);\n            // Generate 5 variations of the base color by adjusting the lightness\n            paletteColors = Array.from({ length: 5 }, (_, i) => {\n                const newLightness = Math.max(0, Math.min(100, lightness + i * 20 - 50));\n                // Convert the modified HSL color back to HEX\n                return hslToHex(hue, saturation, newLightness);\n            });\n        } else if (style === 'gradient') {\n            // Generate two random HEX values\n            const color1 = '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\n            const color2 = '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\n\n            // Create the gradient palette using the random colors\n            paletteColors = [color1, color2];\n        }\n\n        // Generate random colors based on golden ratio\n        const goldenRatio = 0.618033988749895;\n        let h = Math.random();\n        paletteColors = paletteColors.concat(\n            Array.from({ length: 5 }).map(() => {\n                h += goldenRatio;\n                h %= 1;\n                // Return HSL as HEX\n                const [r, g, b] = hslToRgb(h, 1, 0.5);\n                return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;\n            })\n        );\n\n        paletteColors = paletteColors.slice(0, 8);\n\n        setPalette(paletteColors);\n    };\n\n    const hslToRgb = (h, s, l) => {\n        let r, g, b;\n\n        if (s === 0) {\n            r = g = b = l; // achromatic\n        } else {\n            const hue2rgb = (p, q, t) => {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p)\n                t * 6;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            };\n\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n\n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n    };\n\n    const hslToHex = (h, s, l) => {\n        s /= 100;\n        l /= 100;\n\n        let c = (1 - Math.abs(2 * l - 1)) * s,\n            x = c * (1 - Math.abs((h / 60) % 2 - 1)),\n            m = l - c / 2,\n            r = 0,\n            g = 0,\n            b = 0;\n\n        if (0 <= h && h < 60) {\n            r = c; g = x; b = 0;\n        } else if (60 <= h && h < 120) {\n            r = x; g = c; b = 0;\n        } else if (120 <= h && h < 180) {\n            r = 0; g = c; b = x;\n        } else if (180 <= h && h < 240) {\n            r = 0; g = x; b = c;\n        } else if (240 <= h && h < 300) {\n            r = x; g = 0; b = c;\n        } else if (300 <= h && h < 360) {\n            r = c; g = 0; b = x;\n        }\n        r = Math.round((r + m) * 255);\n        g = Math.round((g + m) * 255);\n        b = Math.round((b + m) * 255);\n\n        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n    };\n\n    const hexToHsl = hex => {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n        let r = parseInt(result[1], 16);\n        let g = parseInt(result[2], 16);\n        let b = parseInt(result[3], 16);\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        let max = Math.max(r, g, b), min = Math.min(r, g, b);\n        let h, s, l = (max + min) / 2;\n\n        if (max == min) {\n            h = s = 0; // achromatic\n        } else {\n            let d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n\n            h /= 6;\n        }\n\n        return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];\n    };\n\n\n\n    const copyColorCode = async (color) => {\n        // Clipboard.setString(color);\n        await Clipboard.setStringAsync(color);\n        fetchCopyColorCode();\n\n    };\n    const fetchCopyColorCode = async () => {\n        const color = await Clipboard.getStringAsync();\n        setCopiedCode(color);\n    };\n\n\n    return (\n        <>\n            <View\n                style={[\n                    Styling.primarySquare,\n                    {\n                        shadowOffset: {\n                            width: 10,\n                            height: 10,\n                        },\n                        shadowOpacity: 0.15,\n                        shadowRadius: 10,\n                    },\n                ]}\n            >\n                <View style={styles.container}>\n                    <Text style={{\n                        fontFamily: 'Inter_900Black',\n                        fontSize: '20px',\n                        alignSelf: 'center',\n                        color: 'white',\n                        marginBottom: '1rem'\n                    }}>Random Palette</Text>\n                    <Text style={{\n                        fontFamily: 'Inter_900Black',\n                        fontSize: '18px',\n                        alignSelf: 'center',\n                        color: '#ff9f1c',\n                        marginBottom: '1rem'\n                    }}>Try it out!</Text>\n                    <TouchableOpacity\n                        onPress={() => { setCopiedCode(''); generatePalette(); }}\n                        style={{\n                            backgroundColor: '#ff1654',\n                            padding: '10px',\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderWidth: 4,\n                            borderRadius: 10,\n                            // marginTop: 10,\n                            marginBottom: 4,\n                            width: '20rem'\n                        }}\n                    >\n                        <Text style={{\n                            color: 'white',\n                            marginTop: '0.5vh',\n                            fontSize: '18px',\n                            fontFamily: 'Inter_900Black',\n                            alignSelf: 'center'\n                        }}>Generate!</Text>\n\n                    </TouchableOpacity>\n\n                    <View style={styles.palette}>\n                        {palette.map((color, index) => (\n                            <TouchableOpacity key={index} onPress={() => copyColorCode(color)}>\n                                <View style={[styles.color, { backgroundColor: color }]} />\n                            </TouchableOpacity>\n                        ))}\n                    </View>\n                    <Text style={{\n                        color: 'white',\n                        fontSize: 18,\n                        fontFamily: 'Inter_900Black',\n                        alignSelf: 'center',\n                        marginBottom: '1rem'\n                        // width: '200px'\n                        // margin: '1rem'\n                    }}>{copiedCode}</Text>\n                    {copiedCode != '' &&\n                        <>\n                            <Text style={{\n                                color: 'white',\n                                fontSize: 20,\n                                margin: '0.5rem',\n                                fontFamily: 'Inter_900Black',\n                                alignSelf: 'center'\n                            }}>Copied!</Text>\n                            <View style={{\n                                width: '100px',\n                                alignSelf: 'center',\n                                height: '100px',\n                                borderRadius: 6,\n                                borderWidth: 1,\n                                borderColor: 'rgba(100, 100, 100, 0.25)',\n                                backgroundColor: `${copiedCode}`\n                            }}></View>\n                        </>\n                    }\n\n                </View>\n            </View>\n        </>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        // flex: 1,\n        // alignItems: 'center',\n        // justifyContent: 'center',\n        // alignSelf: 'center',\n        margin: '1rem'\n    },\n    palette: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    color: {\n        width: 50,\n        height: 50,\n        borderRadius: 25,\n        margin: 10,\n    },\n    copiedText: {\n        marginTop: 10,\n        fontSize: 16,\n    },\n});\n\n\n","import React, { useEffect, useState } from 'react';\nimport { View, Text, Button, StyleSheet, TouchableOpacity } from 'react-native';\nimport * as Clipboard from 'expo-clipboard';\n\nexport const RandomPaletteArray = () => {\n    const [palette, setPalette] = useState([]);\n    const [copiedCode, setCopiedCode] = useState('');\n    const [palettes, setPalettes] = useState([]); // New state variable to store generated palettes\n\n    const generatePalette = () => {\n        const hexValues = Array.from({ length: 20 }).map(() => {\n            // Generate a random number between 0 and 16777215 (16777215 is equal to FFFFFF in hexadecimal)\n            const randomNumber = Math.floor(Math.random() * 16777216);\n            // Convert the number to a HEX value and return it\n            return '#' + randomNumber.toString(16).padStart(6, '0');\n        });\n        // Trending colors\n        // const colors = ['#F44336', '#9C27B0', '#3F51B5', '#2196F3', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#FFC107', '#FF9800'];\n        let colors = hexValues;\n\n        // Styles\n        const styles = ['warm', 'cold', 'bright', 'dark', 'pastel', 'vintage', 'triadic', 'complementary', 'gradient'];\n\n        // Generate random colors based on style\n        const style = styles[Math.floor(Math.random() * styles.length)];\n        let paletteColors = [];\n        if (style === 'warm') {\n            paletteColors = colors.slice(0, 5);\n        } else if (style === 'cold') {\n            paletteColors = colors.slice(5, 10);\n        } else if (style === 'bright') {\n            paletteColors = colors.slice(0, 5).concat(colors.slice(5, 10)).sort(() => Math.random() - 0.5);\n        } else if (style === 'dark') {\n            paletteColors = colors.slice(0, 5).concat(colors.slice(5, 10)).sort((a, b) => b.localeCompare(a));\n        } else if (style === 'pastel') {\n            paletteColors = colors.map(color => {\n                // Convert HEX to RGB\n                const [r, g, b] = color.match(/\\w\\w/g).map(x => parseInt(x, 16));\n                // Return pastel version of color as HEX\n                return `#${(((r * 0.7) << 16) | ((g * 0.7) << 8) | (b * 0.7)).toString(16).padStart(6, '0')}`;\n            });\n        } else if (style === 'vintage') {\n            const vintageColors = ['#722f37', '#b69a90', '#d2b6a2', '#e9d4c5', '#eeded3'];\n            paletteColors = vintageColors.sort(() => Math.random() - 0.5);\n        } else if (style === 'triadic') {\n            // Select a random color from the `colors` array\n            const baseColor = colors[Math.floor(Math.random() * colors.length)];\n            // Convert the base color to HSL\n            const [baseHue, baseSaturation, baseLightness] = hexToHsl(baseColor);\n            // Generate the two additional colors by adding or subtracting 120 from the base hue\n            const color1 = hslToHex((baseHue + 120) % 360, baseSaturation, baseLightness);\n            const color2 = hslToHex((baseHue + 240) % 360, baseSaturation, baseLightness);\n            paletteColors = [baseColor, color1, color2];\n        } else if (style === 'complementary') {\n            // Select a random color from the `colors` array\n            const baseColor = colors[Math.floor(Math.random() * colors.length)];\n            // Convert the base color to HSL\n            const [baseHue, baseSaturation, baseLightness] = hexToHsl(baseColor);\n            // Generate the additional color by adding or subtracting 180 from the base hue\n            const color1 = hslToHex((baseHue + 180) % 360, baseSaturation, baseLightness);\n            paletteColors = [baseColor, color1];\n        } else if (style === 'monochromatic') {\n            // Pick a random color from the array\n            const baseColor = colors[Math.floor(Math.random() * colors.length)];\n            // Convert the base color to HSL\n            const [hue, saturation, lightness] = hexToHsl(baseColor);\n            // Generate 5 variations of the base color by adjusting the lightness\n            paletteColors = Array.from({ length: 5 }, (_, i) => {\n                const newLightness = Math.max(0, Math.min(100, lightness + i * 20 - 50));\n                // Convert the modified HSL color back to HEX\n                return hslToHex(hue, saturation, newLightness);\n            });\n        } else if (style === 'gradient') {\n            // Generate two random HEX values\n            const color1 = '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\n            const color2 = '#' + Math.floor(Math.random() * 16777216).toString(16).padStart(6, '0');\n\n            // Create the gradient palette using the random colors\n            paletteColors = [color1, color2];\n        }\n\n\n        // Generate random colors based on golden ratio\n        const goldenRatio = 0.618033988749895;\n        let h = Math.random();\n        paletteColors = paletteColors.concat(\n            Array.from({ length: 5 }).map(() => {\n                h += goldenRatio;\n                h %= 1;\n                // Return HSL as HEX\n                const [r, g, b] = hslToRgb(h, 1, 0.5);\n                return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;\n            })\n        );\n\n        paletteColors = paletteColors.slice(0, 8);\n\n        setPalettes(previous => [...previous, paletteColors])\n    };\n\n    const hslToRgb = (h, s, l) => {\n        let r, g, b;\n\n        if (s === 0) {\n            r = g = b = l; // achromatic\n        } else {\n            const hue2rgb = (p, q, t) => {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p)\n                t * 6;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            };\n\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n\n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n    };\n\n    const hslToHex = (h, s, l) => {\n        s /= 100;\n        l /= 100;\n\n        let c = (1 - Math.abs(2 * l - 1)) * s,\n            x = c * (1 - Math.abs((h / 60) % 2 - 1)),\n            m = l - c / 2,\n            r = 0,\n            g = 0,\n            b = 0;\n\n        if (0 <= h && h < 60) {\n            r = c; g = x; b = 0;\n        } else if (60 <= h && h < 120) {\n            r = x; g = c; b = 0;\n        } else if (120 <= h && h < 180) {\n            r = 0; g = c; b = x;\n        } else if (180 <= h && h < 240) {\n            r = 0; g = x; b = c;\n        } else if (240 <= h && h < 300) {\n            r = x; g = 0; b = c;\n        } else if (300 <= h && h < 360) {\n            r = c; g = 0; b = x;\n        }\n        r = Math.round((r + m) * 255);\n        g = Math.round((g + m) * 255);\n        b = Math.round((b + m) * 255);\n\n        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n    };\n\n    const hexToHsl = hex => {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n        let r = parseInt(result[1], 16);\n        let g = parseInt(result[2], 16);\n        let b = parseInt(result[3], 16);\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        let max = Math.max(r, g, b), min = Math.min(r, g, b);\n        let h, s, l = (max + min) / 2;\n\n        if (max == min) {\n            h = s = 0; // achromatic\n        } else {\n            let d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n\n            h /= 6;\n        }\n\n        return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];\n    };\n\n    const copyColorCode = async (color) => {\n        // Clipboard.setString(color);\n        await Clipboard.setStringAsync(color);\n        fetchCopyColorCode();\n\n    };\n    const fetchCopyColorCode = async () => {\n        const color = await Clipboard.getStringAsync();\n        setCopiedCode(color);\n    };\n\n    const HandleDisplayPalettes = () => {\n\n    }\n\n    useEffect(() => {\n\n        for (let i = 0; i < 10; i++) {\n            generatePalette()\n        }\n\n    }, [])\n    // useEffect(() => {\n    //     console.log(palettes)\n    // }, [palettes])\n\n\n    return (\n        <>\n            <View style={styles.container}>\n                <Text style={{\n                    color: 'white',\n                    fontSize: 18,\n                    fontFamily: 'Inter_900Black',\n                    alignSelf: 'center',\n                    marginBottom: '1rem'\n                    // width: '200px'\n                    // margin: '1rem'\n                }}>{copiedCode}</Text>\n                {copiedCode != '' &&\n                    <>\n                        <Text style={{\n                            color: 'white',\n                            fontSize: 20,\n                            margin: '0.5rem',\n                            fontFamily: 'Inter_900Black',\n                            alignSelf: 'center'\n                        }}>Copied!</Text>\n                        <View style={{\n                            width: '100px',\n                            alignSelf: 'center',\n                            height: '100px',\n                            borderRadius: 6,\n                            borderWidth: 1,\n                            borderColor: 'rgba(100, 100, 100, 0.25)',\n                            backgroundColor: `${copiedCode}`\n                        }}></View>\n                    </>\n                }\n                <View style={styles.palette}>\n                    {palettes.map((num, i) => (\n                        <>\n                            <View style={styles.paletteBox} key={i} >\n                                {palettes[i].map((color, index) => (\n                                    <TouchableOpacity key={index} onPress={() => copyColorCode(color)}>\n                                        <View key={index} style={[styles.color, { backgroundColor: color }]} />\n                                    </TouchableOpacity>\n                                ))}\n                            </View>\n                        </>\n                    ))}\n                </View>\n\n\n            </View>\n            <View style={{ height: '20rem' }} />\n        </>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    palette: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '90vw'\n    },\n    color: {\n        width: 50,\n        height: 50,\n        borderRadius: 25,\n        margin: 10,\n    },\n    copiedText: {\n        marginTop: 10,\n        fontSize: 16,\n    },\n    paletteBox: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        width: '20rem',\n        margin: '1rem',\n        borderWidth: 2,\n        borderColor: 'white',\n        borderRadius: '1rem'\n    }\n});\n\n\n","import React, { useEffect, useState } from 'react';\nimport { View, Text, Image } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { ConvertTool } from './utils/ConvertTool';\nimport { HarmoniousPalette } from './utils/HarmoniousPalette';\nimport { RandomPalette } from './utils/RandomPalette';\nimport { RandomPaletteArray } from './utils/RandomPaletteArray';\nimport { HeightRatio, Styling, WidthRatio } from './Styling';\n\nexport const Index = () => {\n\n    let [fontsLoaded] = useFonts({ Inter_900Black, });\n    if (!fontsLoaded) { return null; }\n\n    return (\n        <>\n            <View style={{ ...Styling.content_container }}>\n\n                <View style={{ flexDirection: 'column', width: '60vw', margin: HeightRatio(10) }}>\n                    <Image\n                        source={require('./assets/cycle.png')}\n                        style={{\n                            height: HeightRatio(150),\n                            width: HeightRatio(150),\n                            justifyContent: 'center',\n                            alignSelf: 'center'\n                        }}\n                        accessibilityLabel=\"Circular image with arcing arrows drawn between HEX, RGBA, and the Color Palette.\"\n                    />\n\n                </View>\n                <View style={{\n                    flexDirection: 'column',\n                    width: WidthRatio(280),\n                    margin: HeightRatio(10)\n                }}>\n                    <Text style={Styling.heading_0}>\n                        Jump from HEX to RGBA to Color Palette!\n                    </Text>\n                    <Text style={{\n                        ...Styling.heading_0,\n                        fontSize: HeightRatio(20),\n                        width: '85%'\n                    }}>\n                        Use colors consistently across different platforms and systems, customize the appearance of colors, and work with the color model that is most convenient for you.\n                    </Text>\n                </View>\n            </View>\n\n            {/* TOOLS HEADER */}\n            <View style={{ ...Styling.content_container, marginTop: HeightRatio(20) }}>\n                <View style={{ flexDirection: 'column', }}>\n                    <View style={{\n                        flexDirection: 'column',\n                        justifyContent: 'center',\n                        marginTop: HeightRatio(10),\n                        width: '90vw'\n                    }}>\n                        <Text style={Styling.heading_0}>\n                            Tools\n                        </Text>\n                        <View style={Styling.division_line} />\n                    </View>\n                </View>\n            </View>\n            <View style={{ ...Styling.content_container, width: WidthRatio(300) }}>\n                <View style={{ flexDirection: 'column', alignSelf: 'center' }}>\n                    <View style={{ ...Styling.content_container }}>\n                        <ConvertTool />\n                    </View>\n\n                </View>\n                <View style={{ flexDirection: 'column', alignSelf: 'center' }}>\n                    <View style={{ ...Styling.content_container }}>\n                        <HarmoniousPalette />\n                    </View>\n                </View>\n                <View style={{ flexDirection: 'column', }}>\n                    <View style={{ ...Styling.content_container }}>\n                        <RandomPalette />\n                    </View>\n                </View>\n            </View>\n\n            {/* COLOR PALETTA INSPIRATION */}\n            <View style={{ ...Styling.content_container, marginTop: HeightRatio(20) }}>\n                <View style={{ flexDirection: 'column' }}>\n                    <Text style={{ ...Styling.heading_0, width: WidthRatio(300) }}>\n                        Color Palette Inspiration\n                    </Text>\n                    <Text style={{\n                        ...Styling.heading_0,\n                        ...Styling.accent_color,\n                        fontSize: HeightRatio(20)\n                    }}>\n                        Click a Color to Copy!\n                    </Text>\n                    <View style={Styling.division_line} />\n                    <View style={{ alignSelf: 'center', marginTop: '1rem' }}></View>\n                </View>\n            </View>\n            <View style={{ ...Styling.content_container }}>\n                <View style={{ flexDirection: 'column', alignSelf: 'center' }}>\n                    <View style={{ ...Styling.content_container }}>\n                        <RandomPaletteArray />\n                    </View>\n                </View>\n            </View>\n        </>\n\n    );\n};\n\n\n\n\n\n\n","import React from 'react';\nimport { Text, View, RefreshControl } from 'react-native';\nimport { Index } from './Index'\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Styling, WidthRatio, HeightRatio } from './Styling';\n\nconst wait = (timeout) => {\n  return new Promise(resolve => setTimeout(resolve, timeout));\n}\n\nfunction HomeScreen({ navigation }) {\n  const [refreshing, setRefreshing] = React.useState(false);\n\n  const onRefresh = React.useCallback(() => {\n    setRefreshing(true);\n    wait(2000).then(() => setRefreshing(false));\n  }, []);\n\n  return (\n    <LinearGradient\n      colors={['#1b262c', '#070707']}\n      style={{ opacity: 1, width: '100%', alignSelf: 'center' }}\n      start={[0.0, 0.0]} end={[0.75, 0.5]}\n    >\n      {/* HEADER */}\n      <View style={{\n        // height: HeightRatio(1),\n        width: WidthRatio(300),\n        alignSelf: 'center'\n      }}>\n        <Text style={Styling.heading_0}>\n          HEX to RGBA <strong style={Styling.accent_color}>Pro</strong>\n        </Text>\n        <View style={Styling.division_line} />\n      </View>\n\n      {/* BODY */}\n      <Index />\n\n      {/* FOOTER */}\n      <View style={Styling.division_line} />\n      <View style={{ alignSelf: 'center', marginTop: HeightRatio(50) }}>\n        <Text style={{ ...Styling.heading_0, fontSize: HeightRatio(20) }}>\n          HEX to RGBA Pro  |  Made with &#x2665;\n        </Text>\n      </View>\n\n      <View style={{ height: HeightRatio(40) }} />\n    </LinearGradient>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Color Converter - Hex to RGBA - HTML Color Picker and Pelette\">\n        <Stack.Screen\n          name=\"Color Converter - Hex to RGBA - HTML Color Picker and Pelette\"\n          component={HomeScreen}\n          options={{\n            animationEnabled: false,\n            headerShown: false,\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/cycle.a5efb9c7.png\";"],"sourceRoot":""}