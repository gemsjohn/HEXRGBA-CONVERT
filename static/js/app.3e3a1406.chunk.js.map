{"version":3,"sources":["assets/x.png","utils/GetColorGradient.js","Convert.js","App.js"],"names":["module","exports","GetColorGradient","color","chroma","scale","brighten","darken","colors","Dimensions","get","width","height","SCREEN_HEIGHT","scaleHeight","HeightRatio","size","newSize","Math","round","PixelRatio","roundToNearestPixel","Convert","useState","value","setValue","result","setResult","setGradient","isHovered","setIsHovered","React","copiedText","setCopiedText","useFonts","Inter_900Black","copyToClipboard","Clipboard","console","log","fetchCopiedText","text","View","Text","style","fontFamily","fontSize","alignSelf","TouchableOpacity","onPress","borderRadius","position","zIndex","backgroundColor","top","Image","source","require","marginTop","marginLeft","flexDirection","margin","TextInput","onChangeText","placeholder","outline","display","justifyContent","padding","border","borderColor","borderTopWidth","borderLeftWidth","borderBottomWidth","borderRightWidth","borderTopLeftRadius","borderBottomLeftRadius","marginBottom","startsWith","r","parseInt","slice","g","b","parts","match","toString","padStart","handleConvert","borderTopRightRadius","borderBottomRightRadius","activeOpacity","styles","button","hoveredButton","normalButton","onMouseEnter","onMouseLeave","textShadowColor","textShadowOffset","textShadowRadius","borderWidth","StyleSheet","create","buttonText","windowWidth","App","opacity","flex","fontWeight","container","StatusBar","alignItems"],"mappings":"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","file":"static/js/app.3e3a1406.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.bc64bca0.png\";","import chroma from 'chroma-js';\n\nexport const GetColorGradient = (color) => {\n  const scale = chroma.scale([chroma(color).brighten(2), color, chroma(color).darken(2)]);\n  return scale.colors(10);\n};","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './utils/GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\nimport xIcon from './assets/x.png';\n\n\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n    //   if (Platform.OS === 'ios') {\n    //     return Math.round(PixelRatio.roundToNearestPixel(newSize))\n    //   } else {\n    //     return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n    //   }\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\n\n\nconst DisplayGradient = (props) => {\n    return (\n        <>\n            <Image source={props.image} style={{ ...Styling.background, opacity: 0.4 }} />\n            <LinearGradient\n                colors={props.gradient}\n                style={{ ...Styling.background, opacity: 0.5 }}\n            />\n        </>\n    )\n}\n\nexport const Convert = () => {\n    const [value, setValue] = useState('')\n    const [result, setResult] = useState('');\n    const [color, setColor] = useState('');\n    const [gradient, setGradient] = useState([]);\n    const [isHovered, setIsHovered] = useState(false);\n    const [copiedText, setCopiedText] = React.useState('');\n    let [fontsLoaded] = useFonts({\n        Inter_900Black,\n    });\n    \n      if (!fontsLoaded) {\n        return null;\n      }\n\n    \n\n        const handleGenerate = () => {\n            setGradient(GetColorGradient(color));\n        };\n\n        const copyToClipboard = async () => {\n            await Clipboard.setStringAsync(result);\n            console.log(\"copyToClipboard\")\n            fetchCopiedText();\n          };\n\n          const fetchCopiedText = async () => {\n            const text = await Clipboard.getStringAsync();\n            setCopiedText(text);\n          };\n\n    const handleConvert = () => {\n        setCopiedText('')\n        if (value.startsWith('#')) {\n            // Convert HEX to RGBA\n            const r = parseInt(value.slice(1, 3), 16);\n            const g = parseInt(value.slice(3, 5), 16);\n            const b = parseInt(value.slice(5, 7), 16);\n            const a = 1; // Assume full opacity\n            setResult(`rgba(${r}, ${g}, ${b}, ${a})`);\n            setGradient(GetColorGradient(`rgba(${r}, ${g}, ${b}, ${a})`))\n          } else if (value.startsWith('rgba')) {\n            setGradient(GetColorGradient(value))\n            // Convert RGBA to HEX\n            const parts = value.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b = parseInt(parts[3]).toString(16).padStart(2, '0');\n            setResult(`#${r}${g}${b}`);\n          }\n    };\n\n    return (\n        <View>\n            <Text style={{ fontFamily: 'Inter_900Black', fontSize: '4vh', alignSelf: 'center', color: 'white' }}>Convert HEX or RGBA</Text>\n            \n            <View style={{}}>\n                {value &&\n                    <TouchableOpacity onPress={() => {setValue('')}} style={{height: '4vh', width: '4vh', borderRadius: 10, position: 'absolute', zIndex: 10, backgroundColor: '#ff1654', top: '1vh'}}>\n                        <Image source={require('./assets/x.png')} style={{height: 15, width: 15, alignSelf: 'center', marginTop: '1.1vh', marginLeft: '0.3vh' }} />\n                    </TouchableOpacity>\n                }\n                <View style={{ flexDirection: 'row', alignSelf: 'center', margin: 10 }}>\n                    {/* {value &&\n                        <TouchableOpacity onPress={() => {setValue('')}} style={{height: HeightRatio(60), width: HeightRatio(60), borderRadius: 10, backgroundColor: 'red', alignSelf: 'center', margin: 10}}>\n                            <Image source={require('./assets/x.png')} style={{height: 25, width: 25, alignSelf: 'center', marginTop: HeightRatio(20), marginLeft: WidthRatio(.5) }} />\n                        </TouchableOpacity>\n                    } */}\n                    <TextInput\n                        value={value}\n                        onChangeText={setValue}\n                        placeholder=\"Enter HEX or RGBA value\"\n                        \n                        // multiline={2}\n                        style={{\n                            outline: 'none',\n                            backgroundColor: 'transparent',\n                            color: 'white',\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            padding: 30,\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderTopWidth: 4,\n                            borderLeftWidth: 4,\n                            borderBottomWidth: 4,\n                            borderRightWidth:0,\n                            borderTopLeftRadius: 30,\n                            borderBottomLeftRadius: 10,\n                            alignSelf: 'center',\n                            marginTop: 10,\n                            marginBottom: 4,\n                            width: '17rem',\n                            fontSize: '1.8vh',\n                            fontFamily: 'Inter_900Black'\n                        }}\n                    />\n                    {/* [[[SUMBIT BUTTON]]] */}\n                    <TouchableOpacity\n                        onPress={() => handleConvert()}\n                        style={{\n                            backgroundColor: '#ff1654',\n                            padding: '1vh',\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderTopWidth: 4,\n                            borderRightWidth: 4,\n                            borderBottomWidth: 4,\n                            borderLeftWidth: 0,\n                            borderTopRightRadius: 10,\n                            borderBottomRightRadius: 30,\n                            marginTop: 10,\n                            marginBottom: 4,\n                            width: '6rem'\n                        }}\n                    >\n                        <Text style={{ color: 'white', marginTop: '2.5vh', fontSize: '2vh', fontFamily: 'Inter_900Black', alignSelf: 'center'}}>SWAP!</Text>\n                    </TouchableOpacity>\n                </View>\n                        {result ? \n                        <>\n                        <TouchableOpacity \n                            onPress={copyToClipboard}\n                            activeOpacity={1}\n                            style={[\n                                styles.button,\n                                isHovered ? styles.hoveredButton : styles.normalButton\n                            ]}\n                            onMouseEnter={() => setIsHovered(true)}\n                            onMouseLeave={() => setIsHovered(false)}\n                        >\n                            {isHovered && \n                                <View style ={{backgroundColor: '#80ed99', padding: '1rem', borderRadius: 30}}>\n                                    <Text style={{ color: 'white', fontSize: '5vh', fontFamily: 'Inter_900Black', alignSelf: 'center', textShadowColor: 'rgba(0, 0, 0, 1)', textShadowOffset: {width: -1, height: 1}, textShadowRadius: 1}}>Copy!</Text>\n                                </View>\n                            }\n                            <Text style={{color: 'black', fontSize: 30, marginTop: '4vh', marginBottom: '2vh', fontFamily: 'Inter_900Black', alignSelf: 'center'}}>{result}</Text>\n                            {copiedText != '' && <Text style={{color: 'black', fontSize: 20, margin: HeightRatio(20), fontFamily: 'Inter_900Black', alignSelf: 'center'}}>Copied!</Text>}\n                            <View style={{width: '18rem', alignSelf: 'center', height: '15rem', marginBottom: HeightRatio(20), borderRadius: 30, backgroundColor: `${result}`}}></View>\n                        </TouchableOpacity>\n                        </>\n                        :\n                        <>\n                            <Text style={{color: 'white', fontSize: 30, margin: HeightRatio(20), fontFamily: 'Inter_900Black', alignSelf: 'center'}}>...result</Text>\n                            <View style={{width: '18rem', alignSelf: 'center', height: '15rem', marginBottom: '2rem', borderRadius: 30, borderWidth: 4, borderColor: 'white'}}></View>\n                        </>\n                        }\n                    \n            </View>          \n\n            {/* <View style={{}}>\n                {gradient.map((c, i) => (\n                    <View key={i} style={{ backgroundColor: c, height: 50 }} />\n                ))}\n            </View> */}\n            \n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    button: {\n      padding: 10,\n      borderRadius: 5,\n    },\n    hoveredButton: {\n      backgroundColor: '#eee',\n      marginBottom: HeightRatio(20),\n      width: '22rem',\n      alignSelf: 'center'\n    },\n    normalButton: {\n      backgroundColor: '#fff',\n      marginBottom: HeightRatio(20),\n      width: '22rem',\n      alignSelf: 'center'\n    },\n    buttonText: {\n      color: '#000',\n      fontSize: 18,\n    },\n  });\n  \n  \n  \n  \n  \n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, Dimensions, PixelRatio, Image } from 'react-native';\nimport { Convert } from './Convert'\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n    //   if (Platform.OS === 'ios') {\n    //     return Math.round(PixelRatio.roundToNearestPixel(newSize))\n    //   } else {\n    //     return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n    //   }\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst DisplayGradient = () => {\n  return (\n    <>\n      <LinearGradient\n        // colors={['#5390d9', '#4361ee']}\n        colors={['#33415c', '#181818']}\n        style={{ opacity: 1, height: '7rem', width: '95vw', marginTop: '1rem', alignSelf: 'center', borderRadius: '10rem', flex: 1 }}\n        // start={[0.0, 0.5]} end={[1.0, 0.5]}\n      >\n        <Text style={{color: 'white', alignSelf: 'center', marginTop: '0.8rem', fontSize: '2.9rem', fontWeight: 'bold'}}>Hex to RGBA Pro</Text>\n        <View style={{borderBottomWidth: 6, borderBottomColor: '#ff006e', width: '20rem', alignSelf: 'center'}}></View>\n      </LinearGradient>\n    </>\n  )\n}\n\nexport default function App() {\n  return (\n    <LinearGradient\n        // colors={['#5390d9', '#4361ee']}\n        colors={['#181818', '#000000' ]}\n        style={{ opacity: 1, width: windowWidth, alignSelf: 'center', flex: 1 }}\n        // start={[0.0, 0.5]} end={[1.0, 0.5]}\n      >\n    <View >\n      {/* <Image source={require('./assets/favicon.png')} style={{width: '10rem', height: '10rem', position: 'absolute', height: '4rem', width: '4rem', top: '0.5rem', left: '1rem'}} />\n    <View style={{borderBottomWidth: 2, borderBottomColor: 'rgba(255, 255, 255, 0.2)', width: windowWidth, marginTop: '5rem', alignSelf: 'center'}}></View>\n    <View style={{borderLeftWidth: 2, borderLeftColor: 'rgba(255, 255, 255, 0.2)', height: windowHeight, marginLeft: '6rem', position: 'absolute'}}></View> */}\n    <View style ={{backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '4rem'}}>\n      <Text style={{color: '#b892ff', alignSelf: 'center', marginTop: '0.8rem', fontSize: '2rem', fontWeight: 'bold', fontFamily: 'Inter_900Black',}}>HEX to RGBA Pro</Text>\n    </View>\n    \n      \n    {/* <DisplayGradient /> */}\n    {/* <View style={{backgroundColor: '#f5cb5c', height: '5rem', width: windowWidth, borderBottomRightRadius: '2rem', borderBottomLeftRadius: '2rem'}}>\n        <Text style={{color: '#000814', alignSelf: 'center', marginTop: '0.8rem', fontSize: '2.9rem', fontWeight: 'bold'}}>HEX To RGBA Pro</Text>\n    </View> */}\n      <View style={styles.container}>\n        <Convert />\n        <StatusBar style=\"auto\" />\n      </View>\n      \n    </View>\n    </LinearGradient>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    // backgroundColor: '#181818',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '6vh'\n  },\n});\n"],"sourceRoot":""}