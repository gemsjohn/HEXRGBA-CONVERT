{"version":3,"sources":["assets/x.png","utils/GetColorGradient.js","Palette.js","Convert.js","Blog.js","App.js"],"names":["module","exports","GetColorGradient","color","chroma","scale","brighten","darken","colors","Palette","useState","inputColor","setInputColor","palette","setPalette","React","gradientCopiedText","setGradientCopiedText","setIsGradientHovered","copyGradientToClipboard","input","Clipboard","console","log","fetchGradientCopiedText","text","View","Text","style","fontFamily","fontSize","alignSelf","TouchableOpacity","onPress","height","width","borderRadius","position","zIndex","backgroundColor","top","left","Image","source","require","marginTop","marginLeft","flexDirection","margin","TextInput","value","onChangeText","placeholder","outline","display","justifyContent","padding","border","borderColor","borderWidth","borderBottomWidth","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","startsWith","newPalette","r","parseInt","substring","g","b","phi","Math","sqrt","toString","padStart","round","parts","match","newHex","generateGoldenRatioPalette","borderTopWidth","marginBottom","flexWrap","map","i","onMouseEnter","onMouseLeave","Dimensions","get","SCREEN_HEIGHT","scaleHeight","HeightRatio","size","newSize","PixelRatio","roundToNearestPixel","Convert","setValue","result","setResult","gradient","setGradient","isHovered","setIsHovered","copiedText","setCopiedText","useFonts","Inter_900Black","copyToClipboard","fetchCopiedText","marginRight","slice","handleConvert","activeOpacity","styles","button","hoveredButton","normalButton","c","StyleSheet","create","buttonText","Blog","paragraph","borderBottomColor","marginVertical","HomeScreen","navigation","LinearGradient","opacity","fontWeight","navigate","SafeAreaView","container","ScrollView","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","BlogScreen","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","name","component","options","animationEnabled","headerShown","alignItems"],"mappings":"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","file":"static/js/app.425f22d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.bc64bca0.png\";","import chroma from 'chroma-js';\n\nexport const GetColorGradient = (color) => {\n  const scale = chroma.scale([chroma(color).brighten(2), color, chroma(color).darken(2)]);\n  return scale.colors(10);\n};","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image } from 'react-native';\nimport color from 'color';\nimport * as Clipboard from 'expo-clipboard';\n\nexport const Palette = () => {\n    const [inputColor, setInputColor] = useState('');\n    const [palette, setPalette] = useState([]);\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n\n    \n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        console.log(\"copyToClipboard\")\n        fetchGradientCopiedText();\n    };\n\n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n    function generateGoldenRatioPalette(inputColor) {\n\n        if (inputColor.startsWith('#')) {\n            // Convert HEX to RGBA\n            const r = parseInt(inputColor.substring(1, 3), 16);\n            const g = parseInt(inputColor.substring(3, 5), 16);\n            const b = parseInt(inputColor.substring(5, 7), 16);\n            const a = 1; // Assume full opacity\n\n            // Calculate the golden ratio\n            const phi = (1 + Math.sqrt(5)) / 2;\n\n            // Generate 5 colors based on the golden ratio\n            const color1 = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n            const color2 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color3 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b / phi).toString(16).padStart(2, '0')}`;\n            const color4 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color5 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n\n\n            return [color1, color2, color3, color4, color5];\n\n        } else if (inputColor.startsWith('rgba')) {\n            console.log(\"STARTS WITH\")\n            // Convert RGBA to HEX\n            const parts = inputColor.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r0 = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g0 = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b0 = parseInt(parts[3]).toString(16).padStart(2, '0');\n            const newHex = `#${r0}${g0}${b0}`;\n\n            const r = parseInt(newHex.substring(1, 3), 16);\n            const g = parseInt(newHex.substring(3, 5), 16);\n            const b = parseInt(newHex.substring(5, 7), 16);\n            const a = 1; // Assume full opacity\n\n            // Calculate the golden ratio\n            const phi = (1 + Math.sqrt(5)) / 2;\n\n            // Generate 5 colors based on the golden ratio\n            const color1 = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n            const color2 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color3 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b / phi).toString(16).padStart(2, '0')}`;\n            const color4 = `#${Math.round(r * phi).toString(16).padStart(2, '0')}${Math.round(g / phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            const color5 = `#${Math.round(r / phi).toString(16).padStart(2, '0')}${Math.round(g * phi).toString(16).padStart(2, '0')}${Math.round(b * phi).toString(16).padStart(2, '0')}`;\n            return [color1, color2, color3, color4, color5];\n        }\n    }\n\n    function handleGeneratePalette() {\n        if (inputColor.startsWith('#') || inputColor.startsWith('rgba')) {\n            const newPalette = generateGoldenRatioPalette(inputColor);\n            setPalette(newPalette);\n        } else {\n            console.log(\"ERROR\")\n        }\n    }\n\n    return (\n        <View>\n            <Text style={{\n                fontFamily: 'Inter_900Black',\n                fontSize: '4vh',\n                alignSelf: 'center',\n                color: 'white'\n            }}>Custom Palette</Text>\n\n            <View style={{}}>\n                {inputColor &&\n                    <TouchableOpacity\n                        onPress={() => { \n                            setInputColor('');\n                            setInputColor('');\n                            setPalette([]);\n                            setGradientCopiedText('');\n                        }}\n                        style={{\n                            height: '4vh',\n                            width: '4vh',\n                            borderRadius: 10,\n                            position: 'absolute',\n                            zIndex: 10,\n                            backgroundColor: '#ff1654',\n                            top: '1vh',\n                            left: '-1.5vw'\n                        }}>\n                        <Image\n                            source={require('./assets/x.png')}\n                            style={{ height: 15, width: 15, alignSelf: 'center', marginTop: '1.3vh', marginLeft: '0.1vh' }}\n                        />\n                    </TouchableOpacity>\n                }\n                <View style={{ flexDirection: 'column', alignSelf: 'center', margin: 10 }}>\n\n                    <TextInput\n                        value={inputColor}\n                        onChangeText={text => setInputColor(text)}\n                        placeholder=\"Enter HEX or RGBA value\"\n                        style={{\n                            outline: 'none',\n                            backgroundColor: 'transparent',\n                            color: 'white',\n                            display: 'flex',\n                            justifyContent: 'flex-start',\n                            padding: 30,\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderWidth: 4,\n                            borderBottomWidth: 2,\n                            borderTopLeftRadius: 30,\n                            borderBottomLeftRadius: 0,\n                            borderTopRightRadius: 30,\n                            borderBottomRightRadius: 0,\n                            alignSelf: 'center',\n                            marginTop: 10,\n                            // marginBottom: 4,\n                            width: '20rem',\n                            fontSize: '1.8vh',\n                            fontFamily: 'Inter_900Black'\n                        }}\n                    />\n                    <TouchableOpacity\n                        onPress={handleGeneratePalette}\n                        style={{\n                            backgroundColor: '#ff1654',\n                            padding: '1vh',\n                            border: 'solid',\n                            borderColor: 'white',\n                            borderWidth: 4,\n                            borderTopWidth: 2,\n                            borderTopLeftRadius: 0,\n                            borderBottomLeftRadius: 30,\n                            borderTopRightRadius: 0,\n                            borderBottomRightRadius: 30,\n                            // marginTop: 10,\n                            marginBottom: 4,\n                            width: '20rem'\n                        }}\n                    >\n                        <Text style={{\n                            color: 'white',\n                            marginTop: '0.5vh',\n                            fontSize: '2vh',\n                            fontFamily: 'Inter_900Black',\n                            alignSelf: 'center'\n                        }}>Generate!</Text>\n                    </TouchableOpacity>\n                </View>\n                {/* <Button onPress={() => console.log(\"Generate\")} title=\"Generate Palette\" /> */}\n                {/* {palette.map(color => (\n                <View style={{ backgroundColor: color, height: 50, width: 50 }} />\n            ))} */}\n\n\n\n                <View style={{ flexDirection: 'row', flexWrap: 'wrap', width: '22rem', alignSelf: 'center', justifyContent: 'center' }}>\n                    {palette.map((color, i) => (\n                        <>\n                            <TouchableOpacity\n                                onPress={() => copyGradientToClipboard(color)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                                onMouseEnter={() => setIsGradientHovered(true)}\n                                onMouseLeave={() => setIsGradientHovered(false)}\n                                key={i}\n                            >\n                                <View key={i} style={{ backgroundColor: color, height: 50, width: 75, borderRadius: 5 }} />\n                            </TouchableOpacity>\n                        </>\n                    ))}\n                </View>\n                <View style={{ alignSelf: 'center', flexDirection: 'column' }}>\n                    <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '2.2rem' }}>{gradientCopiedText}</Text>\n                    {gradientCopiedText != '' &&\n                        <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '1rem', alignSelf: 'center' }}>Copied!</Text>\n                    }\n                </View>\n            </View>\n        </View>\n    );\n}\n","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image, Color } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './utils/GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\nimport { Palette } from './Palette';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const Convert = () => {\n    const [value, setValue] = useState('')\n    const [result, setResult] = useState('');\n    const [color, setColor] = useState('');\n    const [gradient, setGradient] = useState([]);\n    const [isHovered, setIsHovered] = useState(false);\n    const [isGradientHovered, setIsGradientHovered] = useState(false);\n    const [copiedText, setCopiedText] = React.useState('');\n    const [gradientCopiedText, setGradientCopiedText] = React.useState('');\n    let [fontsLoaded] = useFonts({ Inter_900Black, });\n    if (!fontsLoaded) { return null; }\n\n\n\n    const handleGenerate = () => {\n        setGradient(GetColorGradient(color));\n    };\n\n    // Primary Color\n    const copyToClipboard = async () => {\n        await Clipboard.setStringAsync(result);\n        console.log(\"copyToClipboard\")\n        fetchCopiedText();\n    };\n\n    const fetchCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setCopiedText(text);\n    };\n\n    // Gradient\n    const copyGradientToClipboard = async (input) => {\n        await Clipboard.setStringAsync(input);\n        console.log(\"copyToClipboard\")\n        fetchGradientCopiedText();\n    };\n\n    const fetchGradientCopiedText = async () => {\n        const text = await Clipboard.getStringAsync();\n        setGradientCopiedText(text);\n    };\n\n    const handleConvert = () => {\n        setCopiedText('')\n        if (value.startsWith('#')) {\n            // Convert HEX to RGBA\n            const r = parseInt(value.slice(1, 3), 16);\n            const g = parseInt(value.slice(3, 5), 16);\n            const b = parseInt(value.slice(5, 7), 16);\n            const a = 1; // Assume full opacity\n            setResult(`rgba(${r}, ${g}, ${b}, ${a})`);\n            setGradient(GetColorGradient(`rgba(${r}, ${g}, ${b}, ${a})`))\n        } else if (value.startsWith('rgba')) {\n            setGradient(GetColorGradient(value))\n            // Convert RGBA to HEX\n            const parts = value.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n            const r = parseInt(parts[1]).toString(16).padStart(2, '0');\n            const g = parseInt(parts[2]).toString(16).padStart(2, '0');\n            const b = parseInt(parts[3]).toString(16).padStart(2, '0');\n            setResult(`#${r}${g}${b}`);\n        }\n    };\n\n\n\n    return (\n\n        <View style={{flexDirection: 'row', flexWrap: 'wrap', alignSelf: 'center', justifyContent: 'center'}}>\n            <View style={{marginLeft: '3rem', marginRight: '3rem', marginTop: '3rem'}}>\n                <Text style={{\n                    fontFamily: 'Inter_900Black',\n                    fontSize: '4vh',\n                    alignSelf: 'center',\n                    color: 'white'\n                }}>Convert HEX or RGBA</Text>\n\n                <View style={{}}>\n                    {value &&\n                        <TouchableOpacity\n                            onPress={() => { \n                                setValue('');  \n                                setResult('');\n                                setGradient([]);\n                                setGradientCopiedText('');\n                            }}\n                            style={{\n                                height: '4vh',\n                                width: '4vh',\n                                borderRadius: 10,\n                                position: 'absolute',\n                                zIndex: 10,\n                                backgroundColor: '#ff1654',\n                                top: '1vh'\n                            }}>\n                            <Image\n                                source={require('./assets/x.png')}\n                                style={{ height: 15, width: 15, alignSelf: 'center', marginTop: '1.3vh', marginLeft: '0.1vh' }}\n                            />\n                        </TouchableOpacity>\n                    }\n                    <View style={{ flexDirection: 'column', alignSelf: 'center', margin: 10 }}>\n                        <TextInput\n                            value={value}\n                            onChangeText={setValue}\n                            placeholder=\"Enter HEX or RGBA value\"\n                            style={{\n                                outline: 'none',\n                                backgroundColor: 'transparent',\n                                color: 'white',\n                                display: 'flex',\n                                justifyContent: 'flex-start',\n                                padding: 30,\n                                border: 'solid',\n                                borderColor: 'white',\n                                borderWidth: 4,\n                                borderBottomWidth: 2,\n                                borderTopLeftRadius: 30,\n                                borderBottomLeftRadius: 0,\n                                borderTopRightRadius: 30,\n                                borderBottomRightRadius: 0,\n                                alignSelf: 'center',\n                                marginTop: 10,\n                                // marginBottom: 4,\n                                width: '20rem',\n                                fontSize: '1.8vh',\n                                fontFamily: 'Inter_900Black'\n                            }}\n                        />\n                        <TouchableOpacity\n                            onPress={() => handleConvert()}\n                            style={{\n                                backgroundColor: '#ff1654',\n                                padding: '1vh',\n                                border: 'solid',\n                                borderColor: 'white',\n                                borderWidth: 4,\n                                borderTopWidth: 2,\n                                borderTopLeftRadius: 0,\n                                borderBottomLeftRadius: 30,\n                                borderTopRightRadius: 0,\n                                borderBottomRightRadius: 30,\n                                // marginTop: 10,\n                                marginBottom: 4,\n                                width: '20rem'\n                            }}\n                        >\n                            <Text style={{\n                                color: 'white',\n                                marginTop: '0.5vh',\n                                fontSize: '2vh',\n                                fontFamily: 'Inter_900Black',\n                                alignSelf: 'center'\n                            }}>SWAP!</Text>\n                        </TouchableOpacity>\n                    </View>\n                    {result &&\n                        <>\n                            <TouchableOpacity\n                                onPress={copyToClipboard}\n                                activeOpacity={1}\n                                style={[\n                                    styles.button,\n                                    isHovered ? styles.hoveredButton : styles.normalButton\n                                ]}\n                                onMouseEnter={() => setIsHovered(true)}\n                                onMouseLeave={() => setIsHovered(false)}\n                            >\n\n                                <Text style={{\n                                    color: 'black',\n                                    fontSize: 30,\n                                    marginTop: '0.5rem',\n                                    marginBottom: '2vh',\n                                    fontFamily: 'Inter_900Black',\n                                    alignSelf: 'center'\n                                }}>{result}</Text>\n\n                                {copiedText != '' &&\n                                    <Text style={{\n                                        color: 'black',\n                                        fontSize: 20,\n                                        margin: '0.5rem',\n                                        fontFamily: 'Inter_900Black',\n                                        alignSelf: 'center'\n                                    }}>Copied!</Text>\n                                }\n\n                                <View style={{\n                                    width: '18rem',\n                                    alignSelf: 'center',\n                                    height: '15rem',\n                                    marginBottom: HeightRatio(20),\n                                    borderRadius: 30,\n                                    backgroundColor: `${result}`\n                                }}></View>\n\n                            </TouchableOpacity>\n\n                        </>\n                    }\n\n                </View>\n\n\n                <View style={{ flexDirection: 'row', flexWrap: 'wrap', width: '22rem', alignSelf: 'center', justifyContent: 'center' }}>\n                    {gradient.map((c, i) => (\n                        <>\n                            <TouchableOpacity\n                                onPress={() => copyGradientToClipboard(c)} style={{ flexWrap: 'wrap', width: 75, margin: 4 }}\n                                onMouseEnter={() => setIsGradientHovered(true)}\n                                onMouseLeave={() => setIsGradientHovered(false)}\n                                key={i}\n                            >\n                                <View key={i} style={{ backgroundColor: c, height: 50, width: 75, borderRadius: 5 }}>\n                                    {/* {isGradientHovered &&\n                                        <Text key={i} style={{\n                                            fontFamily: 'Inter_900Black',\n                                            alignSelf: 'center',\n                                            marginTop: '1rem'\n                                        }}>{c}</Text>\n                                    } */}\n                                </View>\n                            </TouchableOpacity>\n                        </>\n                    ))}\n                </View>\n                <View style={{ alignSelf: 'center', flexDirection: 'column' }}>\n                    <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '2.2rem' }}>{gradientCopiedText}</Text>\n                    {gradientCopiedText != '' &&\n                        <Text style={{ color: 'white', fontFamily: 'Inter_900Black', fontSize: '1rem', alignSelf: 'center' }}>Copied!</Text>\n                    }\n                </View>\n            </View>\n\n            <View style={{marginLeft: '3rem', marginRight: '3rem', marginTop: '3rem'}}>\n                <View style={{}}>\n                    <Palette />\n                </View>\n            </View>\n\n\n            \n        </View>\n\n    );\n};\n\nconst styles = StyleSheet.create({\n    button: {\n        padding: 10,\n        borderRadius: 5,\n    },\n    hoveredButton: {\n        backgroundColor: 'rgba(255, 255, 255, 0.75)',\n        marginBottom: HeightRatio(20),\n        width: '22rem',\n        alignSelf: 'center'\n    },\n    normalButton: {\n        backgroundColor: '#fff',\n        marginBottom: HeightRatio(20),\n        width: '22rem',\n        alignSelf: 'center'\n    },\n    buttonText: {\n        color: '#000',\n        fontSize: 18,\n    },\n});\n\n\n\n\n\n","import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Dimensions, PixelRatio, TouchableOpacity, StyleSheet, Image, Color } from 'react-native';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { GetColorGradient } from './utils/GetColorGradient';\nimport * as Clipboard from 'expo-clipboard';\nimport { Palette } from './Palette';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n    const newSize = size * scaleWidth;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n    const newSize = size * scaleHeight;\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nexport const Blog = () => {\n    return (\n        <View style={{flexDirection: 'row', flexWrap: 'wrap'}}>\n            <View style={{alignSelf: 'center'}}>\n                <Text style={{...styles.paragraph, color: '#00b4d8'}}>\n                    Complementary Colors\n                </Text>\n                <Text style={styles.paragraph}>\n                    Certain colors and hues can work well together and appear to be complementary \n                    because of the way that the colors are arranged on the color wheel. The color \n                    wheel is a visual representation of the colors of the visible spectrum arranged in a circle.\n                </Text>\n                <Text style={styles.paragraph}>\n                    There are a few different ways that colors can be arranged on the color wheel, but one common \n                    way is to arrange the primary colors (red, yellow, and blue) around the wheel, with the secondary \n                    colors (orange, green, and purple) between the primary colors. The tertiary colors \n                    (yellow-green, blue-green, blue-purple, red-purple, red-orange, and yellow-orange) are \n                    located between the primary and secondary colors on the wheel.\n                </Text>\n                <Text style={styles.paragraph}>\n                    Colors that are located opposite each other on the color wheel are known as complementary colors. \n                    These colors tend to work well together because they are highly contrasting, which can create a \n                    visually appealing balance. For example, red and green are complementary colors, as are blue and orange.\n                </Text>\n                <Text style={styles.paragraph}>\n                    There are several theories about why certain color combinations are pleasing to the eye, and some of \n                    these theories involve mathematical principles such as the golden ratio. However, the exact reasons \n                    for why certain color combinations are perceived as being harmonious or complementary are still not \n                    fully understood and are the subject of ongoing research in fields such as psychology and neuroscience.\n                </Text>\n                <View style={{borderBottomColor: 'white', borderBottomWidth: 4, marginTop: '1rem'}}></View>\n\n            {/* <View style={{ backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '20rem', width: '20rem', borderRadius: '1rem' }}>\n                <Text style={{ color: 'white', alignSelf: 'center', marginTop: '2rem', fontSize: '1.5rem', fontWeight: 'bold', fontFamily: 'Inter_900Black', width: '18rem', }}>Complementary Colors</Text>\n            </View> */}\n\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    button: {\n        padding: 10,\n        borderRadius: 5,\n    },\n    hoveredButton: {\n        backgroundColor: 'rgba(255, 255, 255, 0.75)',\n        marginBottom: HeightRatio(20),\n        width: '22rem',\n        alignSelf: 'center'\n    },\n    normalButton: {\n        backgroundColor: '#fff',\n        marginBottom: HeightRatio(20),\n        width: '22rem',\n        alignSelf: 'center'\n    },\n    buttonText: {\n        color: '#000',\n        fontSize: 18,\n    },\n    paragraph: {\n        marginVertical: 8,\n        color: 'white', fontFamily: 'Inter_900Black', fontSize: '2vh',\n        width: '80vw'\n      },\n});\n\n\n\n\n\n","import { StyleSheet, Text, View, Dimensions, PixelRatio, Image, SafeAreaView, ScrollView, StatusBar, Platform, TouchableOpacity } from 'react-native';\nimport { Convert } from './Convert'\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Blog } from './Blog';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nconst {\n  width: SCREEN_WIDTH,\n  height: SCREEN_HEIGHT,\n} = Dimensions.get('window');\n\nconst scaleWidth = SCREEN_WIDTH / 360;\nconst scaleHeight = SCREEN_HEIGHT / 800;\n\nconst WidthRatio = (size) => {\n  const newSize = size * scaleWidth;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nconst HeightRatio = (size) => {\n  const newSize = size * scaleHeight;\n  return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2\n}\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <LinearGradient\n        colors={['#181818', '#000000']}\n        style={{ opacity: 1, width: '100%', alignSelf: 'center'}}\n      // start={[0.0, 0.5]} end={[1.0, 0.5]}\n      >\n        <View >\n\n          <View style={{ backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '4rem' }}>\n            <Text style={{ color: '#b892ff', alignSelf: 'center', marginTop: '0.8rem', fontSize: '2rem', fontWeight: 'bold', fontFamily: 'Inter_900Black', }}>HEX to RGBA Pro</Text>\n          </View>\n          <View style={{alignSelf: 'center', }}>\n            <TouchableOpacity onPress={() => navigation.navigate('Blog')} style={{backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '3rem', marginTop: '1rem', borderRadius: '1rem'}}>\n              <Text style={{color: 'white', fontSize: 20, margin: '1rem', fontSize: '1.8vh', fontFamily: 'Inter_900Black'}}>BLOG</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={{}}>\n            <SafeAreaView style={styles.container}>\n              <ScrollView style={{}} showsHorizontalScrollIndicator={false} showsVerticalScrollIndicator={false}>\n              <Convert />\n              </ScrollView>\n            </SafeAreaView>\n            {/* <StatusBar style=\"auto\" /> */}\n          </View>\n\n          <View style={{ height: '100rem' }} />\n\n        </View>\n      </LinearGradient>\n  );\n}\n\nfunction BlogScreen({ navigation }) {\n  return (\n    <LinearGradient\n        colors={['#181818', '#000000']}\n        style={{ opacity: 1, width: '100%', alignSelf: 'center' }}\n      // start={[0.0, 0.5]} end={[1.0, 0.5]}\n      >\n        <View >\n\n          <View style={{ backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '4rem' }}>\n            <Text style={{ color: '#b892ff', alignSelf: 'center', marginTop: '0.8rem', fontSize: '2rem', fontWeight: 'bold', fontFamily: 'Inter_900Black', }}>HEX to RGBA Pro</Text>\n          </View>\n          <View style={{alignSelf: 'center', }}>\n            <TouchableOpacity onPress={() => navigation.navigate('Home')} style={{backgroundColor: 'rgba(255, 255, 255, 0.05)', height: '3rem', marginTop: '1rem', borderRadius: '1rem'}}>\n              <Text style={{color: 'white', fontSize: 20, margin: '1rem', fontSize: '1.8vh', fontFamily: 'Inter_900Black'}}>HOME</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={{}}>\n            <SafeAreaView style={styles.container}>\n              <ScrollView style={{}} showsHorizontalScrollIndicator={false} showsVerticalScrollIndicator={false}>\n              <Blog />\n              </ScrollView>\n            </SafeAreaView>\n            {/* <StatusBar style=\"auto\" /> */}\n          </View>\n\n          <View style={{ height: '100rem' }} />\n\n        </View>\n      </LinearGradient>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen \n            name=\"Home\" \n            component={HomeScreen}\n            options={{\n              animationEnabled: false,\n              headerShown: false,\n            }}\n          />\n          <Stack.Screen \n            name=\"Blog\" \n            component={BlogScreen} \n            options={{\n              animationEnabled: false,\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    // backgroundColor: '#181818',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '6vh'\n  },\n});\n"],"sourceRoot":""}